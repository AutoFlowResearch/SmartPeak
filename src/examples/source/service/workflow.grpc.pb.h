// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: workflow.proto
// Original file comments:
// --------------------------------------------------------------------------
//   SmartPeak -- Fast and Accurate CE-, GC- and LC-MS(/MS) Data Processing
// --------------------------------------------------------------------------
// Copyright The SmartPeak Team -- Novo Nordisk Foundation
// Center for Biosustainability, Technical University of Denmark 2018-2022.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// --------------------------------------------------------------------------
// $Maintainer: Ahmed Khalil $
// $Authors: Ahmed Khalil $
// --------------------------------------------------------------------------
// To generate :
// protoc -I . --grpc_out=. --plugin=protoc-gen-grpc=grpc_cpp_plugin \
// workflow.proto
// protoc -I . --cpp_out=. workflow.proto
//
#ifndef GRPC_workflow_2eproto__INCLUDED
#define GRPC_workflow_2eproto__INCLUDED

#include "workflow.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace SmartPeakServer {

class Workflow final {
 public:
  static constexpr char const* service_full_name() {
    return "SmartPeakServer.Workflow";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status runWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::SmartPeakServer::WorkflowResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowResult>> AsyncrunWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowResult>>(AsyncrunWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowResult>> PrepareAsyncrunWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowResult>>(PrepareAsyncrunWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::SmartPeakServer::LogStream>> getLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::SmartPeakServer::LogStream>>(getLogStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::SmartPeakServer::LogStream>> AsyncgetLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::SmartPeakServer::LogStream>>(AsyncgetLogStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::SmartPeakServer::LogStream>> PrepareAsyncgetLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::SmartPeakServer::LogStream>>(PrepareAsyncgetLogStreamRaw(context, request, cq));
    }
    virtual ::grpc::Status getProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::SmartPeakServer::ProgressInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::ProgressInfo>> AsyncgetProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::ProgressInfo>>(AsyncgetProgressInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::ProgressInfo>> PrepareAsyncgetProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::ProgressInfo>>(PrepareAsyncgetProgressInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::SmartPeakServer::WorkflowEvent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowEvent>> AsyncgetWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowEvent>>(AsyncgetWorkflowEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowEvent>> PrepareAsyncgetWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowEvent>>(PrepareAsyncgetWorkflowEventRaw(context, request, cq));
    }
    virtual ::grpc::Status stopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::SmartPeakServer::Interrupter* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::Interrupter>> AsyncstopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::Interrupter>>(AsyncstopRunningWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::Interrupter>> PrepareAsyncstopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::Interrupter>>(PrepareAsyncstopRunningWorkflowRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void runWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void runWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs* request, ::grpc::ClientReadReactor< ::SmartPeakServer::LogStream>* reactor) = 0;
      virtual void getProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::ProgressInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::ProgressInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowEvent* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowEvent* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter* request, ::SmartPeakServer::Interrupter* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter* request, ::SmartPeakServer::Interrupter* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowResult>* AsyncrunWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowResult>* PrepareAsyncrunWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::SmartPeakServer::LogStream>* getLogStreamRaw(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::SmartPeakServer::LogStream>* AsyncgetLogStreamRaw(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::SmartPeakServer::LogStream>* PrepareAsyncgetLogStreamRaw(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::ProgressInfo>* AsyncgetProgressInfoRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::ProgressInfo>* PrepareAsyncgetProgressInfoRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowEvent>* AsyncgetWorkflowEventRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::WorkflowEvent>* PrepareAsyncgetWorkflowEventRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::Interrupter>* AsyncstopRunningWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SmartPeakServer::Interrupter>* PrepareAsyncstopRunningWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status runWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::SmartPeakServer::WorkflowResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowResult>> AsyncrunWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowResult>>(AsyncrunWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowResult>> PrepareAsyncrunWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowResult>>(PrepareAsyncrunWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::SmartPeakServer::LogStream>> getLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::SmartPeakServer::LogStream>>(getLogStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::SmartPeakServer::LogStream>> AsyncgetLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::SmartPeakServer::LogStream>>(AsyncgetLogStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::SmartPeakServer::LogStream>> PrepareAsyncgetLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::SmartPeakServer::LogStream>>(PrepareAsyncgetLogStreamRaw(context, request, cq));
    }
    ::grpc::Status getProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::SmartPeakServer::ProgressInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::ProgressInfo>> AsyncgetProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::ProgressInfo>>(AsyncgetProgressInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::ProgressInfo>> PrepareAsyncgetProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::ProgressInfo>>(PrepareAsyncgetProgressInfoRaw(context, request, cq));
    }
    ::grpc::Status getWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::SmartPeakServer::WorkflowEvent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowEvent>> AsyncgetWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowEvent>>(AsyncgetWorkflowEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowEvent>> PrepareAsyncgetWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowEvent>>(PrepareAsyncgetWorkflowEventRaw(context, request, cq));
    }
    ::grpc::Status stopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::SmartPeakServer::Interrupter* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::Interrupter>> AsyncstopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::Interrupter>>(AsyncstopRunningWorkflowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::Interrupter>> PrepareAsyncstopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::Interrupter>>(PrepareAsyncstopRunningWorkflowRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void runWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowResult* response, std::function<void(::grpc::Status)>) override;
      void runWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getLogStream(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs* request, ::grpc::ClientReadReactor< ::SmartPeakServer::LogStream>* reactor) override;
      void getProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::ProgressInfo* response, std::function<void(::grpc::Status)>) override;
      void getProgressInfo(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::ProgressInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowEvent* response, std::function<void(::grpc::Status)>) override;
      void getWorkflowEvent(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowEvent* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter* request, ::SmartPeakServer::Interrupter* response, std::function<void(::grpc::Status)>) override;
      void stopRunningWorkflow(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter* request, ::SmartPeakServer::Interrupter* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowResult>* AsyncrunWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowResult>* PrepareAsyncrunWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::SmartPeakServer::LogStream>* getLogStreamRaw(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request) override;
    ::grpc::ClientAsyncReader< ::SmartPeakServer::LogStream>* AsyncgetLogStreamRaw(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::SmartPeakServer::LogStream>* PrepareAsyncgetLogStreamRaw(::grpc::ClientContext* context, const ::SmartPeakServer::InquireLogs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::ProgressInfo>* AsyncgetProgressInfoRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::ProgressInfo>* PrepareAsyncgetProgressInfoRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowEvent>* AsyncgetWorkflowEventRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::WorkflowEvent>* PrepareAsyncgetWorkflowEventRaw(::grpc::ClientContext* context, const ::SmartPeakServer::WorkflowParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::Interrupter>* AsyncstopRunningWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SmartPeakServer::Interrupter>* PrepareAsyncstopRunningWorkflowRaw(::grpc::ClientContext* context, const ::SmartPeakServer::Interrupter& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_runWorkflow_;
    const ::grpc::internal::RpcMethod rpcmethod_getLogStream_;
    const ::grpc::internal::RpcMethod rpcmethod_getProgressInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorkflowEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_stopRunningWorkflow_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status runWorkflow(::grpc::ServerContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowResult* response);
    virtual ::grpc::Status getLogStream(::grpc::ServerContext* context, const ::SmartPeakServer::InquireLogs* request, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* writer);
    virtual ::grpc::Status getProgressInfo(::grpc::ServerContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::ProgressInfo* response);
    virtual ::grpc::Status getWorkflowEvent(::grpc::ServerContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowEvent* response);
    virtual ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* context, const ::SmartPeakServer::Interrupter* request, ::SmartPeakServer::Interrupter* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_runWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_runWorkflow() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_runWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrunWorkflow(::grpc::ServerContext* context, ::SmartPeakServer::WorkflowParameters* request, ::grpc::ServerAsyncResponseWriter< ::SmartPeakServer::WorkflowResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getLogStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLogStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getLogStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLogStream(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLogStream(::grpc::ServerContext* context, ::SmartPeakServer::InquireLogs* request, ::grpc::ServerAsyncWriter< ::SmartPeakServer::LogStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getProgressInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getProgressInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getProgressInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProgressInfo(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProgressInfo(::grpc::ServerContext* context, ::SmartPeakServer::WorkflowParameters* request, ::grpc::ServerAsyncResponseWriter< ::SmartPeakServer::ProgressInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorkflowEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorkflowEvent() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getWorkflowEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorkflowEvent(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorkflowEvent(::grpc::ServerContext* context, ::SmartPeakServer::WorkflowParameters* request, ::grpc::ServerAsyncResponseWriter< ::SmartPeakServer::WorkflowEvent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stopRunningWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stopRunningWorkflow() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_stopRunningWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopRunningWorkflow(::grpc::ServerContext* context, ::SmartPeakServer::Interrupter* request, ::grpc::ServerAsyncResponseWriter< ::SmartPeakServer::Interrupter>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_runWorkflow<WithAsyncMethod_getLogStream<WithAsyncMethod_getProgressInfo<WithAsyncMethod_getWorkflowEvent<WithAsyncMethod_stopRunningWorkflow<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_runWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_runWorkflow() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowResult* response) { return this->runWorkflow(context, request, response); }));}
    void SetMessageAllocatorFor_runWorkflow(
        ::grpc::MessageAllocator< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_runWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* runWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getLogStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLogStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::SmartPeakServer::InquireLogs, ::SmartPeakServer::LogStream>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SmartPeakServer::InquireLogs* request) { return this->getLogStream(context, request); }));
    }
    ~WithCallbackMethod_getLogStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLogStream(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::SmartPeakServer::LogStream>* getLogStream(
      ::grpc::CallbackServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getProgressInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getProgressInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::ProgressInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::ProgressInfo* response) { return this->getProgressInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getProgressInfo(
        ::grpc::MessageAllocator< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::ProgressInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::ProgressInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getProgressInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProgressInfo(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProgressInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorkflowEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorkflowEvent() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowEvent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SmartPeakServer::WorkflowParameters* request, ::SmartPeakServer::WorkflowEvent* response) { return this->getWorkflowEvent(context, request, response); }));}
    void SetMessageAllocatorFor_getWorkflowEvent(
        ::grpc::MessageAllocator< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowEvent>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowEvent>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorkflowEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorkflowEvent(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorkflowEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stopRunningWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stopRunningWorkflow() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::Interrupter, ::SmartPeakServer::Interrupter>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SmartPeakServer::Interrupter* request, ::SmartPeakServer::Interrupter* response) { return this->stopRunningWorkflow(context, request, response); }));}
    void SetMessageAllocatorFor_stopRunningWorkflow(
        ::grpc::MessageAllocator< ::SmartPeakServer::Interrupter, ::SmartPeakServer::Interrupter>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SmartPeakServer::Interrupter, ::SmartPeakServer::Interrupter>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stopRunningWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stopRunningWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_runWorkflow<WithCallbackMethod_getLogStream<WithCallbackMethod_getProgressInfo<WithCallbackMethod_getWorkflowEvent<WithCallbackMethod_stopRunningWorkflow<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_runWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_runWorkflow() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_runWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getLogStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLogStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getLogStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLogStream(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getProgressInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getProgressInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getProgressInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProgressInfo(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorkflowEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorkflowEvent() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getWorkflowEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorkflowEvent(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stopRunningWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stopRunningWorkflow() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_stopRunningWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_runWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_runWorkflow() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_runWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrunWorkflow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLogStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLogStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getLogStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLogStream(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLogStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getProgressInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getProgressInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getProgressInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProgressInfo(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProgressInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorkflowEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorkflowEvent() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getWorkflowEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorkflowEvent(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorkflowEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stopRunningWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stopRunningWorkflow() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_stopRunningWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststopRunningWorkflow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_runWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_runWorkflow() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->runWorkflow(context, request, response); }));
    }
    ~WithRawCallbackMethod_runWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* runWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLogStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLogStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getLogStream(context, request); }));
    }
    ~WithRawCallbackMethod_getLogStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLogStream(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getLogStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getProgressInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getProgressInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getProgressInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getProgressInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProgressInfo(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProgressInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorkflowEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorkflowEvent() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorkflowEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorkflowEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorkflowEvent(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorkflowEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stopRunningWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stopRunningWorkflow() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stopRunningWorkflow(context, request, response); }));
    }
    ~WithRawCallbackMethod_stopRunningWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stopRunningWorkflow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_runWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_runWorkflow() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowResult>* streamer) {
                       return this->StreamedrunWorkflow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_runWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status runWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrunWorkflow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SmartPeakServer::WorkflowParameters,::SmartPeakServer::WorkflowResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getProgressInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getProgressInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::ProgressInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::ProgressInfo>* streamer) {
                       return this->StreamedgetProgressInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getProgressInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getProgressInfo(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::ProgressInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetProgressInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SmartPeakServer::WorkflowParameters,::SmartPeakServer::ProgressInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorkflowEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorkflowEvent() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowEvent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SmartPeakServer::WorkflowParameters, ::SmartPeakServer::WorkflowEvent>* streamer) {
                       return this->StreamedgetWorkflowEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorkflowEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorkflowEvent(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::WorkflowParameters* /*request*/, ::SmartPeakServer::WorkflowEvent* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorkflowEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SmartPeakServer::WorkflowParameters,::SmartPeakServer::WorkflowEvent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stopRunningWorkflow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stopRunningWorkflow() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SmartPeakServer::Interrupter, ::SmartPeakServer::Interrupter>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SmartPeakServer::Interrupter, ::SmartPeakServer::Interrupter>* streamer) {
                       return this->StreamedstopRunningWorkflow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stopRunningWorkflow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stopRunningWorkflow(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::Interrupter* /*request*/, ::SmartPeakServer::Interrupter* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedstopRunningWorkflow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SmartPeakServer::Interrupter,::SmartPeakServer::Interrupter>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_runWorkflow<WithStreamedUnaryMethod_getProgressInfo<WithStreamedUnaryMethod_getWorkflowEvent<WithStreamedUnaryMethod_stopRunningWorkflow<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getLogStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getLogStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::SmartPeakServer::InquireLogs, ::SmartPeakServer::LogStream>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::SmartPeakServer::InquireLogs, ::SmartPeakServer::LogStream>* streamer) {
                       return this->StreamedgetLogStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getLogStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLogStream(::grpc::ServerContext* /*context*/, const ::SmartPeakServer::InquireLogs* /*request*/, ::grpc::ServerWriter< ::SmartPeakServer::LogStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetLogStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::SmartPeakServer::InquireLogs,::SmartPeakServer::LogStream>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getLogStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_runWorkflow<WithSplitStreamingMethod_getLogStream<WithStreamedUnaryMethod_getProgressInfo<WithStreamedUnaryMethod_getWorkflowEvent<WithStreamedUnaryMethod_stopRunningWorkflow<Service > > > > > StreamedService;
};

}  // namespace SmartPeakServer


#endif  // GRPC_workflow_2eproto__INCLUDED
