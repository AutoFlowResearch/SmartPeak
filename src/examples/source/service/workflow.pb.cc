// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workflow.proto

#include "workflow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace SmartPeakServer {
constexpr WorkflowParameters::WorkflowParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dataset_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , report_metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , report_sample_types_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integrity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , export__(0)
{}
struct WorkflowParametersDefaultTypeInternal {
  constexpr WorkflowParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowParametersDefaultTypeInternal() {}
  union {
    WorkflowParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowParametersDefaultTypeInternal _WorkflowParameters_default_instance_;
constexpr Interrupter::Interrupter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_interrupt_(false)
  , is_interrupted_(false){}
struct InterrupterDefaultTypeInternal {
  constexpr InterrupterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterrupterDefaultTypeInternal() {}
  union {
    Interrupter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterrupterDefaultTypeInternal _Interrupter_default_instance_;
constexpr WorkflowResult::WorkflowResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_to_results_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkflowResultDefaultTypeInternal {
  constexpr WorkflowResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowResultDefaultTypeInternal() {}
  union {
    WorkflowResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
constexpr InquireLogs::InquireLogs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nr_lines_(0){}
struct InquireLogsDefaultTypeInternal {
  constexpr InquireLogsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InquireLogsDefaultTypeInternal() {}
  union {
    InquireLogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InquireLogsDefaultTypeInternal _InquireLogs_default_instance_;
constexpr LogStream::LogStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_severity_(0)
{}
struct LogStreamDefaultTypeInternal {
  constexpr LogStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogStreamDefaultTypeInternal() {}
  union {
    LogStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogStreamDefaultTypeInternal _LogStream_default_instance_;
constexpr ProgressInfo::ProgressInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProgressInfoDefaultTypeInternal {
  constexpr ProgressInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProgressInfoDefaultTypeInternal() {}
  union {
    ProgressInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProgressInfoDefaultTypeInternal _ProgressInfo_default_instance_;
constexpr WorkflowEvent::WorkflowEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_list_()
  , event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_index_(int64_t{0}){}
struct WorkflowEventDefaultTypeInternal {
  constexpr WorkflowEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowEventDefaultTypeInternal() {}
  union {
    WorkflowEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowEventDefaultTypeInternal _WorkflowEvent_default_instance_;
}  // namespace SmartPeakServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_workflow_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_workflow_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_workflow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_workflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, dataset_path_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, export__),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, report_metadata_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, report_sample_types_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, integrity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::Interrupter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::Interrupter, to_interrupt_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::Interrupter, is_interrupted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, status_code_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, session_id_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, path_to_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::InquireLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::InquireLogs, nr_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::LogStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::LogStream, log_line_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::LogStream, log_severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::ProgressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::ProgressInfo, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowEvent, event_index_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowEvent, item_name_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowEvent, command_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SmartPeakServer::WorkflowParameters)},
  { 10, -1, sizeof(::SmartPeakServer::Interrupter)},
  { 17, -1, sizeof(::SmartPeakServer::WorkflowResult)},
  { 25, -1, sizeof(::SmartPeakServer::InquireLogs)},
  { 31, -1, sizeof(::SmartPeakServer::LogStream)},
  { 38, -1, sizeof(::SmartPeakServer::ProgressInfo)},
  { 44, -1, sizeof(::SmartPeakServer::WorkflowEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_WorkflowParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_Interrupter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_WorkflowResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_InquireLogs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_LogStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_ProgressInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_WorkflowEvent_default_instance_),
};

const char descriptor_table_protodef_workflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016workflow.proto\022\017SmartPeakServer\"\355\001\n\022Wo"
  "rkflowParameters\022\024\n\014dataset_path\030\001 \001(\t\022@"
  "\n\006export\030\002 \001(\01620.SmartPeakServer.Workflo"
  "wParameters.ExportReport\022\027\n\017report_metad"
  "ata\030\003 \001(\t\022\033\n\023report_sample_types\030\004 \001(\t\022\021"
  "\n\tintegrity\030\005 \001(\t\"6\n\014ExportReport\022\007\n\003ALL"
  "\020\000\022\r\n\tFEATUREDB\020\001\022\016\n\nPIVOTTABLE\020\002\";\n\013Int"
  "errupter\022\024\n\014to_interrupt\030\001 \001(\010\022\026\n\016is_int"
  "errupted\030\002 \001(\010\"R\n\016WorkflowResult\022\023\n\013stat"
  "us_code\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\027\n\017pat"
  "h_to_results\030\003 \001(\t\"\037\n\013InquireLogs\022\020\n\010nr_"
  "lines\030\001 \001(\005\"\271\001\n\tLogStream\022\020\n\010log_line\030\001 "
  "\001(\t\022<\n\014log_severity\030\002 \001(\0162&.SmartPeakSer"
  "ver.LogStream.LogSeverity\"\\\n\013LogSeverity"
  "\022\010\n\004NONE\020\000\022\t\n\005FATAL\020\001\022\t\n\005ERROR\020\002\022\013\n\007WARN"
  "ING\020\003\022\010\n\004INFO\020\004\022\t\n\005DEBUG\020\005\022\013\n\007VERBOSE\020\006\""
  "#\n\014ProgressInfo\022\023\n\013status_code\030\001 \001(\t\"a\n\r"
  "WorkflowEvent\022\022\n\nevent_name\030\001 \001(\t\022\023\n\013eve"
  "nt_index\030\002 \001(\003\022\021\n\titem_name\030\003 \001(\t\022\024\n\014com"
  "mand_list\030\004 \003(\t2\270\003\n\010Workflow\022U\n\013runWorkf"
  "low\022#.SmartPeakServer.WorkflowParameters"
  "\032\037.SmartPeakServer.WorkflowResult\"\000\022L\n\014g"
  "etLogStream\022\034.SmartPeakServer.InquireLog"
  "s\032\032.SmartPeakServer.LogStream\"\0000\001\022W\n\017get"
  "ProgressInfo\022#.SmartPeakServer.WorkflowP"
  "arameters\032\035.SmartPeakServer.ProgressInfo"
  "\"\000\022Y\n\020getWorkflowEvent\022#.SmartPeakServer"
  ".WorkflowParameters\032\036.SmartPeakServer.Wo"
  "rkflowEvent\"\000\022S\n\023stopRunningWorkflow\022\034.S"
  "martPeakServer.Interrupter\032\034.SmartPeakSe"
  "rver.Interrupter\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_workflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workflow_2eproto = {
  false, false, 1226, descriptor_table_protodef_workflow_2eproto, "workflow.proto", 
  &descriptor_table_workflow_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_workflow_2eproto::offsets,
  file_level_metadata_workflow_2eproto, file_level_enum_descriptors_workflow_2eproto, file_level_service_descriptors_workflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_workflow_2eproto_getter() {
  return &descriptor_table_workflow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_workflow_2eproto(&descriptor_table_workflow_2eproto);
namespace SmartPeakServer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowParameters_ExportReport_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_workflow_2eproto);
  return file_level_enum_descriptors_workflow_2eproto[0];
}
bool WorkflowParameters_ExportReport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WorkflowParameters_ExportReport WorkflowParameters::ALL;
constexpr WorkflowParameters_ExportReport WorkflowParameters::FEATUREDB;
constexpr WorkflowParameters_ExportReport WorkflowParameters::PIVOTTABLE;
constexpr WorkflowParameters_ExportReport WorkflowParameters::ExportReport_MIN;
constexpr WorkflowParameters_ExportReport WorkflowParameters::ExportReport_MAX;
constexpr int WorkflowParameters::ExportReport_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogStream_LogSeverity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_workflow_2eproto);
  return file_level_enum_descriptors_workflow_2eproto[1];
}
bool LogStream_LogSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogStream_LogSeverity LogStream::NONE;
constexpr LogStream_LogSeverity LogStream::FATAL;
constexpr LogStream_LogSeverity LogStream::ERROR;
constexpr LogStream_LogSeverity LogStream::WARNING;
constexpr LogStream_LogSeverity LogStream::INFO;
constexpr LogStream_LogSeverity LogStream::DEBUG;
constexpr LogStream_LogSeverity LogStream::VERBOSE;
constexpr LogStream_LogSeverity LogStream::LogSeverity_MIN;
constexpr LogStream_LogSeverity LogStream::LogSeverity_MAX;
constexpr int LogStream::LogSeverity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class WorkflowParameters::_Internal {
 public:
};

WorkflowParameters::WorkflowParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.WorkflowParameters)
}
WorkflowParameters::WorkflowParameters(const WorkflowParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataset_path().empty()) {
    dataset_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dataset_path(), 
      GetArenaForAllocation());
  }
  report_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_metadata().empty()) {
    report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_metadata(), 
      GetArenaForAllocation());
  }
  report_sample_types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_sample_types().empty()) {
    report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_sample_types(), 
      GetArenaForAllocation());
  }
  integrity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integrity().empty()) {
    integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integrity(), 
      GetArenaForAllocation());
  }
  export__ = from.export__;
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.WorkflowParameters)
}

inline void WorkflowParameters::SharedCtor() {
dataset_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
report_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
report_sample_types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integrity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
export__ = 0;
}

WorkflowParameters::~WorkflowParameters() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.WorkflowParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dataset_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_sample_types_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integrity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowParameters::ArenaDtor(void* object) {
  WorkflowParameters* _this = reinterpret_cast< WorkflowParameters* >(object);
  (void)_this;
}
void WorkflowParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.WorkflowParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataset_path_.ClearToEmpty();
  report_metadata_.ClearToEmpty();
  report_sample_types_.ClearToEmpty();
  integrity_.ClearToEmpty();
  export__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dataset_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dataset_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.dataset_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_export_(static_cast<::SmartPeakServer::WorkflowParameters_ExportReport>(val));
        } else goto handle_unusual;
        continue;
      // string report_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_report_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.report_metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string report_sample_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_report_sample_types();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.report_sample_types"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integrity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_integrity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.integrity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.WorkflowParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataset_path = 1;
  if (!this->_internal_dataset_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataset_path().data(), static_cast<int>(this->_internal_dataset_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.dataset_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dataset_path(), target);
  }

  // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
  if (this->_internal_export_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_export_(), target);
  }

  // string report_metadata = 3;
  if (!this->_internal_report_metadata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_metadata().data(), static_cast<int>(this->_internal_report_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.report_metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_report_metadata(), target);
  }

  // string report_sample_types = 4;
  if (!this->_internal_report_sample_types().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_sample_types().data(), static_cast<int>(this->_internal_report_sample_types().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.report_sample_types");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_report_sample_types(), target);
  }

  // string integrity = 5;
  if (!this->_internal_integrity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integrity().data(), static_cast<int>(this->_internal_integrity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.integrity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_integrity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.WorkflowParameters)
  return target;
}

size_t WorkflowParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.WorkflowParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataset_path = 1;
  if (!this->_internal_dataset_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataset_path());
  }

  // string report_metadata = 3;
  if (!this->_internal_report_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_metadata());
  }

  // string report_sample_types = 4;
  if (!this->_internal_report_sample_types().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_sample_types());
  }

  // string integrity = 5;
  if (!this->_internal_integrity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integrity());
  }

  // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
  if (this->_internal_export_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_export_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowParameters::GetClassData() const { return &_class_data_; }

void WorkflowParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkflowParameters *>(to)->MergeFrom(
      static_cast<const WorkflowParameters &>(from));
}


void WorkflowParameters::MergeFrom(const WorkflowParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.WorkflowParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dataset_path().empty()) {
    _internal_set_dataset_path(from._internal_dataset_path());
  }
  if (!from._internal_report_metadata().empty()) {
    _internal_set_report_metadata(from._internal_report_metadata());
  }
  if (!from._internal_report_sample_types().empty()) {
    _internal_set_report_sample_types(from._internal_report_sample_types());
  }
  if (!from._internal_integrity().empty()) {
    _internal_set_integrity(from._internal_integrity());
  }
  if (from._internal_export_() != 0) {
    _internal_set_export_(from._internal_export_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowParameters::CopyFrom(const WorkflowParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.WorkflowParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowParameters::IsInitialized() const {
  return true;
}

void WorkflowParameters::InternalSwap(WorkflowParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dataset_path_, GetArenaForAllocation(),
      &other->dataset_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_metadata_, GetArenaForAllocation(),
      &other->report_metadata_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_sample_types_, GetArenaForAllocation(),
      &other->report_sample_types_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integrity_, GetArenaForAllocation(),
      &other->integrity_, other->GetArenaForAllocation()
  );
  swap(export__, other->export__);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[0]);
}

// ===================================================================

class Interrupter::_Internal {
 public:
};

Interrupter::Interrupter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.Interrupter)
}
Interrupter::Interrupter(const Interrupter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&to_interrupt_, &from.to_interrupt_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_interrupted_) -
    reinterpret_cast<char*>(&to_interrupt_)) + sizeof(is_interrupted_));
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.Interrupter)
}

inline void Interrupter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&to_interrupt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_interrupted_) -
    reinterpret_cast<char*>(&to_interrupt_)) + sizeof(is_interrupted_));
}

Interrupter::~Interrupter() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.Interrupter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interrupter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Interrupter::ArenaDtor(void* object) {
  Interrupter* _this = reinterpret_cast< Interrupter* >(object);
  (void)_this;
}
void Interrupter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interrupter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interrupter::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.Interrupter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&to_interrupt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_interrupted_) -
      reinterpret_cast<char*>(&to_interrupt_)) + sizeof(is_interrupted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interrupter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool to_interrupt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          to_interrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_interrupted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_interrupted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Interrupter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.Interrupter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool to_interrupt = 1;
  if (this->_internal_to_interrupt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_to_interrupt(), target);
  }

  // bool is_interrupted = 2;
  if (this->_internal_is_interrupted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_interrupted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.Interrupter)
  return target;
}

size_t Interrupter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.Interrupter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool to_interrupt = 1;
  if (this->_internal_to_interrupt() != 0) {
    total_size += 1 + 1;
  }

  // bool is_interrupted = 2;
  if (this->_internal_is_interrupted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interrupter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interrupter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interrupter::GetClassData() const { return &_class_data_; }

void Interrupter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Interrupter *>(to)->MergeFrom(
      static_cast<const Interrupter &>(from));
}


void Interrupter::MergeFrom(const Interrupter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.Interrupter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_to_interrupt() != 0) {
    _internal_set_to_interrupt(from._internal_to_interrupt());
  }
  if (from._internal_is_interrupted() != 0) {
    _internal_set_is_interrupted(from._internal_is_interrupted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interrupter::CopyFrom(const Interrupter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.Interrupter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interrupter::IsInitialized() const {
  return true;
}

void Interrupter::InternalSwap(Interrupter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interrupter, is_interrupted_)
      + sizeof(Interrupter::is_interrupted_)
      - PROTOBUF_FIELD_OFFSET(Interrupter, to_interrupt_)>(
          reinterpret_cast<char*>(&to_interrupt_),
          reinterpret_cast<char*>(&other->to_interrupt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interrupter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[1]);
}

// ===================================================================

class WorkflowResult::_Internal {
 public:
};

WorkflowResult::WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.WorkflowResult)
}
WorkflowResult::WorkflowResult(const WorkflowResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_code().empty()) {
    status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_code(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  path_to_results_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path_to_results().empty()) {
    path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_to_results(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.WorkflowResult)
}

inline void WorkflowResult::SharedCtor() {
status_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_to_results_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkflowResult::~WorkflowResult() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.WorkflowResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_to_results_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowResult::ArenaDtor(void* object) {
  WorkflowResult* _this = reinterpret_cast< WorkflowResult* >(object);
  (void)_this;
}
void WorkflowResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.WorkflowResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_.ClearToEmpty();
  session_id_.ClearToEmpty();
  path_to_results_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowResult.status_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowResult.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path_to_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path_to_results();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowResult.path_to_results"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.WorkflowResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code = 1;
  if (!this->_internal_status_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code().data(), static_cast<int>(this->_internal_status_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowResult.status_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowResult.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string path_to_results = 3;
  if (!this->_internal_path_to_results().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_to_results().data(), static_cast<int>(this->_internal_path_to_results().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowResult.path_to_results");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path_to_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.WorkflowResult)
  return target;
}

size_t WorkflowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.WorkflowResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code = 1;
  if (!this->_internal_status_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code());
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string path_to_results = 3;
  if (!this->_internal_path_to_results().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_to_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowResult::GetClassData() const { return &_class_data_; }

void WorkflowResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkflowResult *>(to)->MergeFrom(
      static_cast<const WorkflowResult &>(from));
}


void WorkflowResult::MergeFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_code().empty()) {
    _internal_set_status_code(from._internal_status_code());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_path_to_results().empty()) {
    _internal_set_path_to_results(from._internal_path_to_results());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowResult::CopyFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResult::IsInitialized() const {
  return true;
}

void WorkflowResult::InternalSwap(WorkflowResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_code_, GetArenaForAllocation(),
      &other->status_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, GetArenaForAllocation(),
      &other->session_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_to_results_, GetArenaForAllocation(),
      &other->path_to_results_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[2]);
}

// ===================================================================

class InquireLogs::_Internal {
 public:
};

InquireLogs::InquireLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.InquireLogs)
}
InquireLogs::InquireLogs(const InquireLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nr_lines_ = from.nr_lines_;
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.InquireLogs)
}

inline void InquireLogs::SharedCtor() {
nr_lines_ = 0;
}

InquireLogs::~InquireLogs() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.InquireLogs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InquireLogs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InquireLogs::ArenaDtor(void* object) {
  InquireLogs* _this = reinterpret_cast< InquireLogs* >(object);
  (void)_this;
}
void InquireLogs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InquireLogs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InquireLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.InquireLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nr_lines_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InquireLogs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nr_lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nr_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InquireLogs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.InquireLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nr_lines = 1;
  if (this->_internal_nr_lines() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nr_lines(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.InquireLogs)
  return target;
}

size_t InquireLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.InquireLogs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nr_lines = 1;
  if (this->_internal_nr_lines() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nr_lines());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InquireLogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InquireLogs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InquireLogs::GetClassData() const { return &_class_data_; }

void InquireLogs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InquireLogs *>(to)->MergeFrom(
      static_cast<const InquireLogs &>(from));
}


void InquireLogs::MergeFrom(const InquireLogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.InquireLogs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nr_lines() != 0) {
    _internal_set_nr_lines(from._internal_nr_lines());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InquireLogs::CopyFrom(const InquireLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.InquireLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InquireLogs::IsInitialized() const {
  return true;
}

void InquireLogs::InternalSwap(InquireLogs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nr_lines_, other->nr_lines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InquireLogs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[3]);
}

// ===================================================================

class LogStream::_Internal {
 public:
};

LogStream::LogStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.LogStream)
}
LogStream::LogStream(const LogStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_line().empty()) {
    log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_line(), 
      GetArenaForAllocation());
  }
  log_severity_ = from.log_severity_;
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.LogStream)
}

inline void LogStream::SharedCtor() {
log_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_severity_ = 0;
}

LogStream::~LogStream() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.LogStream)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogStream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogStream::ArenaDtor(void* object) {
  LogStream* _this = reinterpret_cast< LogStream* >(object);
  (void)_this;
}
void LogStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogStream::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.LogStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_line_.ClearToEmpty();
  log_severity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string log_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_log_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.LogStream.log_line"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SmartPeakServer.LogStream.LogSeverity log_severity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_severity(static_cast<::SmartPeakServer::LogStream_LogSeverity>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.LogStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_line = 1;
  if (!this->_internal_log_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_line().data(), static_cast<int>(this->_internal_log_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.LogStream.log_line");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_log_line(), target);
  }

  // .SmartPeakServer.LogStream.LogSeverity log_severity = 2;
  if (this->_internal_log_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_log_severity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.LogStream)
  return target;
}

size_t LogStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.LogStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_line = 1;
  if (!this->_internal_log_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_line());
  }

  // .SmartPeakServer.LogStream.LogSeverity log_severity = 2;
  if (this->_internal_log_severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_severity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogStream::GetClassData() const { return &_class_data_; }

void LogStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LogStream *>(to)->MergeFrom(
      static_cast<const LogStream &>(from));
}


void LogStream::MergeFrom(const LogStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.LogStream)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log_line().empty()) {
    _internal_set_log_line(from._internal_log_line());
  }
  if (from._internal_log_severity() != 0) {
    _internal_set_log_severity(from._internal_log_severity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogStream::CopyFrom(const LogStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.LogStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStream::IsInitialized() const {
  return true;
}

void LogStream::InternalSwap(LogStream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_line_, GetArenaForAllocation(),
      &other->log_line_, other->GetArenaForAllocation()
  );
  swap(log_severity_, other->log_severity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogStream::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[4]);
}

// ===================================================================

class ProgressInfo::_Internal {
 public:
};

ProgressInfo::ProgressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.ProgressInfo)
}
ProgressInfo::ProgressInfo(const ProgressInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_code().empty()) {
    status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.ProgressInfo)
}

inline void ProgressInfo::SharedCtor() {
status_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProgressInfo::~ProgressInfo() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.ProgressInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProgressInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProgressInfo::ArenaDtor(void* object) {
  ProgressInfo* _this = reinterpret_cast< ProgressInfo* >(object);
  (void)_this;
}
void ProgressInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProgressInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.ProgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgressInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.ProgressInfo.status_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgressInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.ProgressInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code = 1;
  if (!this->_internal_status_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code().data(), static_cast<int>(this->_internal_status_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.ProgressInfo.status_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.ProgressInfo)
  return target;
}

size_t ProgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.ProgressInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code = 1;
  if (!this->_internal_status_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProgressInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProgressInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProgressInfo::GetClassData() const { return &_class_data_; }

void ProgressInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProgressInfo *>(to)->MergeFrom(
      static_cast<const ProgressInfo &>(from));
}


void ProgressInfo::MergeFrom(const ProgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.ProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status_code().empty()) {
    _internal_set_status_code(from._internal_status_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProgressInfo::CopyFrom(const ProgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.ProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressInfo::IsInitialized() const {
  return true;
}

void ProgressInfo::InternalSwap(ProgressInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_code_, GetArenaForAllocation(),
      &other->status_code_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgressInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[5]);
}

// ===================================================================

class WorkflowEvent::_Internal {
 public:
};

WorkflowEvent::WorkflowEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  command_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.WorkflowEvent)
}
WorkflowEvent::WorkflowEvent(const WorkflowEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_list_(from.command_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_name().empty()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArenaForAllocation());
  }
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_name().empty()) {
    item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name(), 
      GetArenaForAllocation());
  }
  event_index_ = from.event_index_;
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.WorkflowEvent)
}

inline void WorkflowEvent::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_index_ = int64_t{0};
}

WorkflowEvent::~WorkflowEvent() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.WorkflowEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowEvent::ArenaDtor(void* object) {
  WorkflowEvent* _this = reinterpret_cast< WorkflowEvent* >(object);
  (void)_this;
}
void WorkflowEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.WorkflowEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_list_.Clear();
  event_name_.ClearToEmpty();
  item_name_.ClearToEmpty();
  event_index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowEvent.event_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 event_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string item_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowEvent.item_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string command_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowEvent.command_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.WorkflowEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_name = 1;
  if (!this->_internal_event_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // int64 event_index = 2;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_event_index(), target);
  }

  // string item_name = 3;
  if (!this->_internal_item_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowEvent.item_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_name(), target);
  }

  // repeated string command_list = 4;
  for (int i = 0, n = this->_internal_command_list_size(); i < n; i++) {
    const auto& s = this->_internal_command_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowEvent.command_list");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.WorkflowEvent)
  return target;
}

size_t WorkflowEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.WorkflowEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(command_list_.size());
  for (int i = 0, n = command_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      command_list_.Get(i));
  }

  // string event_name = 1;
  if (!this->_internal_event_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_name());
  }

  // string item_name = 3;
  if (!this->_internal_item_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item_name());
  }

  // int64 event_index = 2;
  if (this->_internal_event_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_event_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkflowEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkflowEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkflowEvent::GetClassData() const { return &_class_data_; }

void WorkflowEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WorkflowEvent *>(to)->MergeFrom(
      static_cast<const WorkflowEvent &>(from));
}


void WorkflowEvent::MergeFrom(const WorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.WorkflowEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_list_.MergeFrom(from.command_list_);
  if (!from._internal_event_name().empty()) {
    _internal_set_event_name(from._internal_event_name());
  }
  if (!from._internal_item_name().empty()) {
    _internal_set_item_name(from._internal_item_name());
  }
  if (from._internal_event_index() != 0) {
    _internal_set_event_index(from._internal_event_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkflowEvent::CopyFrom(const WorkflowEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.WorkflowEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowEvent::IsInitialized() const {
  return true;
}

void WorkflowEvent::InternalSwap(WorkflowEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  command_list_.InternalSwap(&other->command_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_name_, GetArenaForAllocation(),
      &other->event_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_name_, GetArenaForAllocation(),
      &other->item_name_, other->GetArenaForAllocation()
  );
  swap(event_index_, other->event_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_workflow_2eproto_getter, &descriptor_table_workflow_2eproto_once,
      file_level_metadata_workflow_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartPeakServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartPeakServer::WorkflowParameters* Arena::CreateMaybeMessage< ::SmartPeakServer::WorkflowParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::WorkflowParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::Interrupter* Arena::CreateMaybeMessage< ::SmartPeakServer::Interrupter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::Interrupter >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::WorkflowResult* Arena::CreateMaybeMessage< ::SmartPeakServer::WorkflowResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::WorkflowResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::InquireLogs* Arena::CreateMaybeMessage< ::SmartPeakServer::InquireLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::InquireLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::LogStream* Arena::CreateMaybeMessage< ::SmartPeakServer::LogStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::LogStream >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::ProgressInfo* Arena::CreateMaybeMessage< ::SmartPeakServer::ProgressInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::ProgressInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::WorkflowEvent* Arena::CreateMaybeMessage< ::SmartPeakServer::WorkflowEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::WorkflowEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
