// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workflow.proto

#include "workflow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace SmartPeakServer {
constexpr WorkflowParameters::WorkflowParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , report_metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , report_sample_types_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integrity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , export__(0)
{}
struct WorkflowParametersDefaultTypeInternal {
  constexpr WorkflowParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowParametersDefaultTypeInternal() {}
  union {
    WorkflowParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowParametersDefaultTypeInternal _WorkflowParameters_default_instance_;
constexpr SingleAxisData::SingleAxisData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_data_()
  , _axis_data_cached_byte_size_(){}
struct SingleAxisDataDefaultTypeInternal {
  constexpr SingleAxisDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleAxisDataDefaultTypeInternal() {}
  union {
    SingleAxisData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleAxisDataDefaultTypeInternal _SingleAxisData_default_instance_;
constexpr GraphData::GraphData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : series_names_area_()
  , x_data_()
  , y_data_()
  , z_data_()
  , series_names_scatter_()
  , x_data_scatter_()
  , y_data_scatter_()
  , x_axis_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , y_axis_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , z_axis_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_min_(0)
  , x_max_(0)
  , y_min_(0)
  , y_max_(0)
  , nb_points_(0)
  , max_nb_points_(0){}
struct GraphDataDefaultTypeInternal {
  constexpr GraphDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphDataDefaultTypeInternal() {}
  union {
    GraphData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphDataDefaultTypeInternal _GraphData_default_instance_;
constexpr HeatmapData::HeatmapData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : selected_sample_names_()
  , selected_transitions_()
  , selected_transition_groups_()
  , header_row_()
  , header_column_()
  , column_data_()
  , x_axis_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , y_axis_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selected_feature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , feat_value_min_(0)
  , feat_value_max_(0){}
struct HeatmapDataDefaultTypeInternal {
  constexpr HeatmapDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeatmapDataDefaultTypeInternal() {}
  union {
    HeatmapData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeatmapDataDefaultTypeInternal _HeatmapData_default_instance_;
constexpr WorkflowResult::WorkflowResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_to_results_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , graph_data_(nullptr)
  , heatmap_data_(nullptr){}
struct WorkflowResultDefaultTypeInternal {
  constexpr WorkflowResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowResultDefaultTypeInternal() {}
  union {
    WorkflowResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
constexpr InquireLogs::InquireLogs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nr_lines_(0){}
struct InquireLogsDefaultTypeInternal {
  constexpr InquireLogsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InquireLogsDefaultTypeInternal() {}
  union {
    InquireLogs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InquireLogsDefaultTypeInternal _InquireLogs_default_instance_;
constexpr LogStream::LogStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LogStreamDefaultTypeInternal {
  constexpr LogStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogStreamDefaultTypeInternal() {}
  union {
    LogStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogStreamDefaultTypeInternal _LogStream_default_instance_;
}  // namespace SmartPeakServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_workflow_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_workflow_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_workflow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_workflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, sequence_file_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, export__),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, report_metadata_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, report_sample_types_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowParameters, integrity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::SingleAxisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::SingleAxisData, axis_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, series_names_area_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, x_data_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, y_data_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, z_data_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, series_names_scatter_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, x_data_scatter_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, y_data_scatter_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, x_axis_title_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, y_axis_title_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, z_axis_title_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, x_min_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, x_max_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, y_min_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, y_max_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, nb_points_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::GraphData, max_nb_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, selected_sample_names_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, selected_transitions_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, selected_transition_groups_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, header_row_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, header_column_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, column_data_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, x_axis_title_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, y_axis_title_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, selected_feature_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, feat_value_min_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::HeatmapData, feat_value_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, status_code_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, session_id_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, path_to_results_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, graph_data_),
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::WorkflowResult, heatmap_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::InquireLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::InquireLogs, nr_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::LogStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmartPeakServer::LogStream, log_line_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SmartPeakServer::WorkflowParameters)},
  { 10, -1, sizeof(::SmartPeakServer::SingleAxisData)},
  { 16, -1, sizeof(::SmartPeakServer::GraphData)},
  { 37, -1, sizeof(::SmartPeakServer::HeatmapData)},
  { 53, -1, sizeof(::SmartPeakServer::WorkflowResult)},
  { 63, -1, sizeof(::SmartPeakServer::InquireLogs)},
  { 69, -1, sizeof(::SmartPeakServer::LogStream)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_WorkflowParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_SingleAxisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_GraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_HeatmapData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_WorkflowResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_InquireLogs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SmartPeakServer::_LogStream_default_instance_),
};

const char descriptor_table_protodef_workflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016workflow.proto\022\017SmartPeakServer\"\356\001\n\022Wo"
  "rkflowParameters\022\025\n\rsequence_file\030\001 \001(\t\022"
  "@\n\006export\030\002 \001(\01620.SmartPeakServer.Workfl"
  "owParameters.ExportReport\022\027\n\017report_meta"
  "data\030\003 \001(\t\022\033\n\023report_sample_types\030\004 \001(\t\022"
  "\021\n\tintegrity\030\005 \001(\t\"6\n\014ExportReport\022\007\n\003AL"
  "L\020\000\022\r\n\tFEATUREDB\020\001\022\016\n\nPIVOTTABLE\020\002\"#\n\016Si"
  "ngleAxisData\022\021\n\taxis_data\030\001 \003(\002\"\361\003\n\tGrap"
  "hData\022\031\n\021series_names_area\030\001 \003(\t\022/\n\006x_da"
  "ta\030\002 \003(\0132\037.SmartPeakServer.SingleAxisDat"
  "a\022/\n\006y_data\030\003 \003(\0132\037.SmartPeakServer.Sing"
  "leAxisData\022/\n\006z_data\030\004 \003(\0132\037.SmartPeakSe"
  "rver.SingleAxisData\022\034\n\024series_names_scat"
  "ter\030\005 \003(\t\0227\n\016x_data_scatter\030\006 \003(\0132\037.Smar"
  "tPeakServer.SingleAxisData\0227\n\016y_data_sca"
  "tter\030\007 \003(\0132\037.SmartPeakServer.SingleAxisD"
  "ata\022\024\n\014x_axis_title\030\010 \001(\t\022\024\n\014y_axis_titl"
  "e\030\t \001(\t\022\024\n\014z_axis_title\030\n \001(\t\022\r\n\005x_min\030\013"
  " \001(\002\022\r\n\005x_max\030\014 \001(\002\022\r\n\005y_min\030\r \001(\002\022\r\n\005y_"
  "max\030\016 \001(\002\022\021\n\tnb_points\030\017 \001(\005\022\025\n\rmax_nb_p"
  "oints\030\020 \001(\005\"\305\002\n\013HeatmapData\022\035\n\025selected_"
  "sample_names\030\001 \003(\t\022\034\n\024selected_transitio"
  "ns\030\002 \003(\t\022\"\n\032selected_transition_groups\030\003"
  " \003(\t\022\022\n\nheader_row\030\004 \003(\t\022\025\n\rheader_colum"
  "n\030\005 \003(\t\0224\n\013column_data\030\006 \003(\0132\037.SmartPeak"
  "Server.SingleAxisData\022\024\n\014x_axis_title\030\007 "
  "\001(\t\022\024\n\014y_axis_title\030\010 \001(\t\022\030\n\020selected_fe"
  "ature\030\t \001(\t\022\026\n\016feat_value_min\030\n \001(\002\022\026\n\016f"
  "eat_value_max\030\013 \001(\002\"\266\001\n\016WorkflowResult\022\023"
  "\n\013status_code\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022"
  "\027\n\017path_to_results\030\003 \001(\t\022.\n\ngraph_data\030\004"
  " \001(\0132\032.SmartPeakServer.GraphData\0222\n\014heat"
  "map_data\030\005 \001(\0132\034.SmartPeakServer.Heatmap"
  "Data\"\037\n\013InquireLogs\022\020\n\010nr_lines\030\001 \001(\005\"\035\n"
  "\tLogStream\022\020\n\010log_line\030\001 \001(\t2\257\001\n\010Workflo"
  "w\022U\n\013runWorkflow\022#.SmartPeakServer.Workf"
  "lowParameters\032\037.SmartPeakServer.Workflow"
  "Result\"\000\022L\n\014getLogStream\022\034.SmartPeakServ"
  "er.InquireLogs\032\032.SmartPeakServer.LogStre"
  "am\"\0000\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_workflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workflow_2eproto = {
  false, false, 1574, descriptor_table_protodef_workflow_2eproto, "workflow.proto", 
  &descriptor_table_workflow_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_workflow_2eproto::offsets,
  file_level_metadata_workflow_2eproto, file_level_enum_descriptors_workflow_2eproto, file_level_service_descriptors_workflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_workflow_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_workflow_2eproto);
  return descriptor_table_workflow_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_workflow_2eproto(&descriptor_table_workflow_2eproto);
namespace SmartPeakServer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowParameters_ExportReport_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_workflow_2eproto);
  return file_level_enum_descriptors_workflow_2eproto[0];
}
bool WorkflowParameters_ExportReport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WorkflowParameters_ExportReport WorkflowParameters::ALL;
constexpr WorkflowParameters_ExportReport WorkflowParameters::FEATUREDB;
constexpr WorkflowParameters_ExportReport WorkflowParameters::PIVOTTABLE;
constexpr WorkflowParameters_ExportReport WorkflowParameters::ExportReport_MIN;
constexpr WorkflowParameters_ExportReport WorkflowParameters::ExportReport_MAX;
constexpr int WorkflowParameters::ExportReport_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class WorkflowParameters::_Internal {
 public:
};

WorkflowParameters::WorkflowParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.WorkflowParameters)
}
WorkflowParameters::WorkflowParameters(const WorkflowParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequence_file().empty()) {
    sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_file(), 
      GetArena());
  }
  report_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_metadata().empty()) {
    report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_metadata(), 
      GetArena());
  }
  report_sample_types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_sample_types().empty()) {
    report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_sample_types(), 
      GetArena());
  }
  integrity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integrity().empty()) {
    integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integrity(), 
      GetArena());
  }
  export__ = from.export__;
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.WorkflowParameters)
}

void WorkflowParameters::SharedCtor() {
sequence_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
report_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
report_sample_types_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integrity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
export__ = 0;
}

WorkflowParameters::~WorkflowParameters() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.WorkflowParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkflowParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_sample_types_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integrity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowParameters::ArenaDtor(void* object) {
  WorkflowParameters* _this = reinterpret_cast< WorkflowParameters* >(object);
  (void)_this;
}
void WorkflowParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.WorkflowParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_file_.ClearToEmpty();
  report_metadata_.ClearToEmpty();
  report_sample_types_.ClearToEmpty();
  integrity_.ClearToEmpty();
  export__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sequence_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequence_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.sequence_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_export_(static_cast<::SmartPeakServer::WorkflowParameters_ExportReport>(val));
        } else goto handle_unusual;
        continue;
      // string report_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_report_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.report_metadata"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string report_sample_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_report_sample_types();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.report_sample_types"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integrity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_integrity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowParameters.integrity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.WorkflowParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence_file = 1;
  if (this->sequence_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_file().data(), static_cast<int>(this->_internal_sequence_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.sequence_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence_file(), target);
  }

  // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
  if (this->export_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_export_(), target);
  }

  // string report_metadata = 3;
  if (this->report_metadata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_metadata().data(), static_cast<int>(this->_internal_report_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.report_metadata");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_report_metadata(), target);
  }

  // string report_sample_types = 4;
  if (this->report_sample_types().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_sample_types().data(), static_cast<int>(this->_internal_report_sample_types().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.report_sample_types");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_report_sample_types(), target);
  }

  // string integrity = 5;
  if (this->integrity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integrity().data(), static_cast<int>(this->_internal_integrity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowParameters.integrity");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_integrity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.WorkflowParameters)
  return target;
}

size_t WorkflowParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.WorkflowParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence_file = 1;
  if (this->sequence_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_file());
  }

  // string report_metadata = 3;
  if (this->report_metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_metadata());
  }

  // string report_sample_types = 4;
  if (this->report_sample_types().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_sample_types());
  }

  // string integrity = 5;
  if (this->integrity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integrity());
  }

  // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
  if (this->export_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_export_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.WorkflowParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.WorkflowParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.WorkflowParameters)
    MergeFrom(*source);
  }
}

void WorkflowParameters::MergeFrom(const WorkflowParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.WorkflowParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence_file().size() > 0) {
    _internal_set_sequence_file(from._internal_sequence_file());
  }
  if (from.report_metadata().size() > 0) {
    _internal_set_report_metadata(from._internal_report_metadata());
  }
  if (from.report_sample_types().size() > 0) {
    _internal_set_report_sample_types(from._internal_report_sample_types());
  }
  if (from.integrity().size() > 0) {
    _internal_set_integrity(from._internal_integrity());
  }
  if (from.export_() != 0) {
    _internal_set_export_(from._internal_export_());
  }
}

void WorkflowParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.WorkflowParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowParameters::CopyFrom(const WorkflowParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.WorkflowParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowParameters::IsInitialized() const {
  return true;
}

void WorkflowParameters::InternalSwap(WorkflowParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequence_file_.Swap(&other->sequence_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  report_metadata_.Swap(&other->report_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  report_sample_types_.Swap(&other->report_sample_types_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  integrity_.Swap(&other->integrity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(export__, other->export__);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SingleAxisData::_Internal {
 public:
};

SingleAxisData::SingleAxisData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  axis_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.SingleAxisData)
}
SingleAxisData::SingleAxisData(const SingleAxisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      axis_data_(from.axis_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.SingleAxisData)
}

void SingleAxisData::SharedCtor() {
}

SingleAxisData::~SingleAxisData() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.SingleAxisData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleAxisData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SingleAxisData::ArenaDtor(void* object) {
  SingleAxisData* _this = reinterpret_cast< SingleAxisData* >(object);
  (void)_this;
}
void SingleAxisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleAxisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleAxisData::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.SingleAxisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleAxisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float axis_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_axis_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_axis_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleAxisData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.SingleAxisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float axis_data = 1;
  if (this->_internal_axis_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_axis_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.SingleAxisData)
  return target;
}

size_t SingleAxisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.SingleAxisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float axis_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_axis_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _axis_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleAxisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.SingleAxisData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAxisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleAxisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.SingleAxisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.SingleAxisData)
    MergeFrom(*source);
  }
}

void SingleAxisData::MergeFrom(const SingleAxisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.SingleAxisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axis_data_.MergeFrom(from.axis_data_);
}

void SingleAxisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.SingleAxisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAxisData::CopyFrom(const SingleAxisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.SingleAxisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAxisData::IsInitialized() const {
  return true;
}

void SingleAxisData::InternalSwap(SingleAxisData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  axis_data_.InternalSwap(&other->axis_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleAxisData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GraphData::_Internal {
 public:
};

GraphData::GraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_names_area_(arena),
  x_data_(arena),
  y_data_(arena),
  z_data_(arena),
  series_names_scatter_(arena),
  x_data_scatter_(arena),
  y_data_scatter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.GraphData)
}
GraphData::GraphData(const GraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      series_names_area_(from.series_names_area_),
      x_data_(from.x_data_),
      y_data_(from.y_data_),
      z_data_(from.z_data_),
      series_names_scatter_(from.series_names_scatter_),
      x_data_scatter_(from.x_data_scatter_),
      y_data_scatter_(from.y_data_scatter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x_axis_title().empty()) {
    x_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x_axis_title(), 
      GetArena());
  }
  y_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_y_axis_title().empty()) {
    y_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_y_axis_title(), 
      GetArena());
  }
  z_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_z_axis_title().empty()) {
    z_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_z_axis_title(), 
      GetArena());
  }
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_nb_points_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(max_nb_points_));
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.GraphData)
}

void GraphData::SharedCtor() {
x_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
y_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
z_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_nb_points_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(max_nb_points_));
}

GraphData::~GraphData() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.GraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  x_axis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_axis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  z_axis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphData::ArenaDtor(void* object) {
  GraphData* _this = reinterpret_cast< GraphData* >(object);
  (void)_this;
}
void GraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.GraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_names_area_.Clear();
  x_data_.Clear();
  y_data_.Clear();
  z_data_.Clear();
  series_names_scatter_.Clear();
  x_data_scatter_.Clear();
  y_data_scatter_.Clear();
  x_axis_title_.ClearToEmpty();
  y_axis_title_.ClearToEmpty();
  z_axis_title_.ClearToEmpty();
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_nb_points_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(max_nb_points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string series_names_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_series_names_area();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.GraphData.series_names_area"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartPeakServer.SingleAxisData x_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_x_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartPeakServer.SingleAxisData y_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_y_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartPeakServer.SingleAxisData z_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_z_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string series_names_scatter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_series_names_scatter();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.GraphData.series_names_scatter"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartPeakServer.SingleAxisData x_data_scatter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_x_data_scatter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartPeakServer.SingleAxisData y_data_scatter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_y_data_scatter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string x_axis_title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_x_axis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.GraphData.x_axis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string y_axis_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_y_axis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.GraphData.y_axis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string z_axis_title = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_z_axis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.GraphData.z_axis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x_min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          x_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x_max = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          x_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_min = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          y_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_max = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          y_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 nb_points = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          nb_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_nb_points = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          max_nb_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.GraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string series_names_area = 1;
  for (int i = 0, n = this->_internal_series_names_area_size(); i < n; i++) {
    const auto& s = this->_internal_series_names_area(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.GraphData.series_names_area");
    target = stream->WriteString(1, s, target);
  }

  // repeated .SmartPeakServer.SingleAxisData x_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_x_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_x_data(i), target, stream);
  }

  // repeated .SmartPeakServer.SingleAxisData y_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_y_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_y_data(i), target, stream);
  }

  // repeated .SmartPeakServer.SingleAxisData z_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_z_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_z_data(i), target, stream);
  }

  // repeated string series_names_scatter = 5;
  for (int i = 0, n = this->_internal_series_names_scatter_size(); i < n; i++) {
    const auto& s = this->_internal_series_names_scatter(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.GraphData.series_names_scatter");
    target = stream->WriteString(5, s, target);
  }

  // repeated .SmartPeakServer.SingleAxisData x_data_scatter = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_x_data_scatter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_x_data_scatter(i), target, stream);
  }

  // repeated .SmartPeakServer.SingleAxisData y_data_scatter = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_y_data_scatter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_y_data_scatter(i), target, stream);
  }

  // string x_axis_title = 8;
  if (this->x_axis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_axis_title().data(), static_cast<int>(this->_internal_x_axis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.GraphData.x_axis_title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_x_axis_title(), target);
  }

  // string y_axis_title = 9;
  if (this->y_axis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_y_axis_title().data(), static_cast<int>(this->_internal_y_axis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.GraphData.y_axis_title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_y_axis_title(), target);
  }

  // string z_axis_title = 10;
  if (this->z_axis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z_axis_title().data(), static_cast<int>(this->_internal_z_axis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.GraphData.z_axis_title");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_z_axis_title(), target);
  }

  // float x_min = 11;
  if (!(this->x_min() <= 0 && this->x_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_x_min(), target);
  }

  // float x_max = 12;
  if (!(this->x_max() <= 0 && this->x_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_x_max(), target);
  }

  // float y_min = 13;
  if (!(this->y_min() <= 0 && this->y_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_y_min(), target);
  }

  // float y_max = 14;
  if (!(this->y_max() <= 0 && this->y_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_y_max(), target);
  }

  // int32 nb_points = 15;
  if (this->nb_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_nb_points(), target);
  }

  // int32 max_nb_points = 16;
  if (this->max_nb_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_max_nb_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.GraphData)
  return target;
}

size_t GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.GraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string series_names_area = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(series_names_area_.size());
  for (int i = 0, n = series_names_area_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      series_names_area_.Get(i));
  }

  // repeated .SmartPeakServer.SingleAxisData x_data = 2;
  total_size += 1UL * this->_internal_x_data_size();
  for (const auto& msg : this->x_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartPeakServer.SingleAxisData y_data = 3;
  total_size += 1UL * this->_internal_y_data_size();
  for (const auto& msg : this->y_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartPeakServer.SingleAxisData z_data = 4;
  total_size += 1UL * this->_internal_z_data_size();
  for (const auto& msg : this->z_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string series_names_scatter = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(series_names_scatter_.size());
  for (int i = 0, n = series_names_scatter_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      series_names_scatter_.Get(i));
  }

  // repeated .SmartPeakServer.SingleAxisData x_data_scatter = 6;
  total_size += 1UL * this->_internal_x_data_scatter_size();
  for (const auto& msg : this->x_data_scatter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SmartPeakServer.SingleAxisData y_data_scatter = 7;
  total_size += 1UL * this->_internal_y_data_scatter_size();
  for (const auto& msg : this->y_data_scatter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string x_axis_title = 8;
  if (this->x_axis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_axis_title());
  }

  // string y_axis_title = 9;
  if (this->y_axis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_y_axis_title());
  }

  // string z_axis_title = 10;
  if (this->z_axis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z_axis_title());
  }

  // float x_min = 11;
  if (!(this->x_min() <= 0 && this->x_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float x_max = 12;
  if (!(this->x_max() <= 0 && this->x_max() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_min = 13;
  if (!(this->y_min() <= 0 && this->y_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_max = 14;
  if (!(this->y_max() <= 0 && this->y_max() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 nb_points = 15;
  if (this->nb_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nb_points());
  }

  // int32 max_nb_points = 16;
  if (this->max_nb_points() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_nb_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.GraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.GraphData)
    MergeFrom(*source);
  }
}

void GraphData::MergeFrom(const GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_names_area_.MergeFrom(from.series_names_area_);
  x_data_.MergeFrom(from.x_data_);
  y_data_.MergeFrom(from.y_data_);
  z_data_.MergeFrom(from.z_data_);
  series_names_scatter_.MergeFrom(from.series_names_scatter_);
  x_data_scatter_.MergeFrom(from.x_data_scatter_);
  y_data_scatter_.MergeFrom(from.y_data_scatter_);
  if (from.x_axis_title().size() > 0) {
    _internal_set_x_axis_title(from._internal_x_axis_title());
  }
  if (from.y_axis_title().size() > 0) {
    _internal_set_y_axis_title(from._internal_y_axis_title());
  }
  if (from.z_axis_title().size() > 0) {
    _internal_set_z_axis_title(from._internal_z_axis_title());
  }
  if (!(from.x_min() <= 0 && from.x_min() >= 0)) {
    _internal_set_x_min(from._internal_x_min());
  }
  if (!(from.x_max() <= 0 && from.x_max() >= 0)) {
    _internal_set_x_max(from._internal_x_max());
  }
  if (!(from.y_min() <= 0 && from.y_min() >= 0)) {
    _internal_set_y_min(from._internal_y_min());
  }
  if (!(from.y_max() <= 0 && from.y_max() >= 0)) {
    _internal_set_y_max(from._internal_y_max());
  }
  if (from.nb_points() != 0) {
    _internal_set_nb_points(from._internal_nb_points());
  }
  if (from.max_nb_points() != 0) {
    _internal_set_max_nb_points(from._internal_max_nb_points());
  }
}

void GraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphData::CopyFrom(const GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphData::IsInitialized() const {
  return true;
}

void GraphData::InternalSwap(GraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  series_names_area_.InternalSwap(&other->series_names_area_);
  x_data_.InternalSwap(&other->x_data_);
  y_data_.InternalSwap(&other->y_data_);
  z_data_.InternalSwap(&other->z_data_);
  series_names_scatter_.InternalSwap(&other->series_names_scatter_);
  x_data_scatter_.InternalSwap(&other->x_data_scatter_);
  y_data_scatter_.InternalSwap(&other->y_data_scatter_);
  x_axis_title_.Swap(&other->x_axis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  y_axis_title_.Swap(&other->y_axis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  z_axis_title_.Swap(&other->z_axis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphData, max_nb_points_)
      + sizeof(GraphData::max_nb_points_)
      - PROTOBUF_FIELD_OFFSET(GraphData, x_min_)>(
          reinterpret_cast<char*>(&x_min_),
          reinterpret_cast<char*>(&other->x_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeatmapData::_Internal {
 public:
};

HeatmapData::HeatmapData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  selected_sample_names_(arena),
  selected_transitions_(arena),
  selected_transition_groups_(arena),
  header_row_(arena),
  header_column_(arena),
  column_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.HeatmapData)
}
HeatmapData::HeatmapData(const HeatmapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      selected_sample_names_(from.selected_sample_names_),
      selected_transitions_(from.selected_transitions_),
      selected_transition_groups_(from.selected_transition_groups_),
      header_row_(from.header_row_),
      header_column_(from.header_column_),
      column_data_(from.column_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x_axis_title().empty()) {
    x_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_x_axis_title(), 
      GetArena());
  }
  y_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_y_axis_title().empty()) {
    y_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_y_axis_title(), 
      GetArena());
  }
  selected_feature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selected_feature().empty()) {
    selected_feature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_selected_feature(), 
      GetArena());
  }
  ::memcpy(&feat_value_min_, &from.feat_value_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&feat_value_max_) -
    reinterpret_cast<char*>(&feat_value_min_)) + sizeof(feat_value_max_));
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.HeatmapData)
}

void HeatmapData::SharedCtor() {
x_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
y_axis_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
selected_feature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feat_value_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feat_value_max_) -
    reinterpret_cast<char*>(&feat_value_min_)) + sizeof(feat_value_max_));
}

HeatmapData::~HeatmapData() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.HeatmapData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeatmapData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  x_axis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_axis_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selected_feature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeatmapData::ArenaDtor(void* object) {
  HeatmapData* _this = reinterpret_cast< HeatmapData* >(object);
  (void)_this;
}
void HeatmapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeatmapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeatmapData::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.HeatmapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selected_sample_names_.Clear();
  selected_transitions_.Clear();
  selected_transition_groups_.Clear();
  header_row_.Clear();
  header_column_.Clear();
  column_data_.Clear();
  x_axis_title_.ClearToEmpty();
  y_axis_title_.ClearToEmpty();
  selected_feature_.ClearToEmpty();
  ::memset(&feat_value_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feat_value_max_) -
      reinterpret_cast<char*>(&feat_value_min_)) + sizeof(feat_value_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeatmapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string selected_sample_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_selected_sample_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.selected_sample_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string selected_transitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_selected_transitions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.selected_transitions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string selected_transition_groups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_selected_transition_groups();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.selected_transition_groups"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string header_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_header_row();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.header_row"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string header_column = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_header_column();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.header_column"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .SmartPeakServer.SingleAxisData column_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string x_axis_title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_x_axis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.x_axis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string y_axis_title = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_y_axis_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.y_axis_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string selected_feature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_selected_feature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.HeatmapData.selected_feature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float feat_value_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          feat_value_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float feat_value_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          feat_value_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeatmapData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.HeatmapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string selected_sample_names = 1;
  for (int i = 0, n = this->_internal_selected_sample_names_size(); i < n; i++) {
    const auto& s = this->_internal_selected_sample_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.selected_sample_names");
    target = stream->WriteString(1, s, target);
  }

  // repeated string selected_transitions = 2;
  for (int i = 0, n = this->_internal_selected_transitions_size(); i < n; i++) {
    const auto& s = this->_internal_selected_transitions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.selected_transitions");
    target = stream->WriteString(2, s, target);
  }

  // repeated string selected_transition_groups = 3;
  for (int i = 0, n = this->_internal_selected_transition_groups_size(); i < n; i++) {
    const auto& s = this->_internal_selected_transition_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.selected_transition_groups");
    target = stream->WriteString(3, s, target);
  }

  // repeated string header_row = 4;
  for (int i = 0, n = this->_internal_header_row_size(); i < n; i++) {
    const auto& s = this->_internal_header_row(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.header_row");
    target = stream->WriteString(4, s, target);
  }

  // repeated string header_column = 5;
  for (int i = 0, n = this->_internal_header_column_size(); i < n; i++) {
    const auto& s = this->_internal_header_column(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.header_column");
    target = stream->WriteString(5, s, target);
  }

  // repeated .SmartPeakServer.SingleAxisData column_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_column_data(i), target, stream);
  }

  // string x_axis_title = 7;
  if (this->x_axis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_axis_title().data(), static_cast<int>(this->_internal_x_axis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.x_axis_title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_x_axis_title(), target);
  }

  // string y_axis_title = 8;
  if (this->y_axis_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_y_axis_title().data(), static_cast<int>(this->_internal_y_axis_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.y_axis_title");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_y_axis_title(), target);
  }

  // string selected_feature = 9;
  if (this->selected_feature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selected_feature().data(), static_cast<int>(this->_internal_selected_feature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.HeatmapData.selected_feature");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_selected_feature(), target);
  }

  // float feat_value_min = 10;
  if (!(this->feat_value_min() <= 0 && this->feat_value_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_feat_value_min(), target);
  }

  // float feat_value_max = 11;
  if (!(this->feat_value_max() <= 0 && this->feat_value_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_feat_value_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.HeatmapData)
  return target;
}

size_t HeatmapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.HeatmapData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string selected_sample_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(selected_sample_names_.size());
  for (int i = 0, n = selected_sample_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      selected_sample_names_.Get(i));
  }

  // repeated string selected_transitions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(selected_transitions_.size());
  for (int i = 0, n = selected_transitions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      selected_transitions_.Get(i));
  }

  // repeated string selected_transition_groups = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(selected_transition_groups_.size());
  for (int i = 0, n = selected_transition_groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      selected_transition_groups_.Get(i));
  }

  // repeated string header_row = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(header_row_.size());
  for (int i = 0, n = header_row_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      header_row_.Get(i));
  }

  // repeated string header_column = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(header_column_.size());
  for (int i = 0, n = header_column_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      header_column_.Get(i));
  }

  // repeated .SmartPeakServer.SingleAxisData column_data = 6;
  total_size += 1UL * this->_internal_column_data_size();
  for (const auto& msg : this->column_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string x_axis_title = 7;
  if (this->x_axis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_axis_title());
  }

  // string y_axis_title = 8;
  if (this->y_axis_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_y_axis_title());
  }

  // string selected_feature = 9;
  if (this->selected_feature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_feature());
  }

  // float feat_value_min = 10;
  if (!(this->feat_value_min() <= 0 && this->feat_value_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float feat_value_max = 11;
  if (!(this->feat_value_max() <= 0 && this->feat_value_max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeatmapData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.HeatmapData)
  GOOGLE_DCHECK_NE(&from, this);
  const HeatmapData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeatmapData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.HeatmapData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.HeatmapData)
    MergeFrom(*source);
  }
}

void HeatmapData::MergeFrom(const HeatmapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.HeatmapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selected_sample_names_.MergeFrom(from.selected_sample_names_);
  selected_transitions_.MergeFrom(from.selected_transitions_);
  selected_transition_groups_.MergeFrom(from.selected_transition_groups_);
  header_row_.MergeFrom(from.header_row_);
  header_column_.MergeFrom(from.header_column_);
  column_data_.MergeFrom(from.column_data_);
  if (from.x_axis_title().size() > 0) {
    _internal_set_x_axis_title(from._internal_x_axis_title());
  }
  if (from.y_axis_title().size() > 0) {
    _internal_set_y_axis_title(from._internal_y_axis_title());
  }
  if (from.selected_feature().size() > 0) {
    _internal_set_selected_feature(from._internal_selected_feature());
  }
  if (!(from.feat_value_min() <= 0 && from.feat_value_min() >= 0)) {
    _internal_set_feat_value_min(from._internal_feat_value_min());
  }
  if (!(from.feat_value_max() <= 0 && from.feat_value_max() >= 0)) {
    _internal_set_feat_value_max(from._internal_feat_value_max());
  }
}

void HeatmapData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.HeatmapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeatmapData::CopyFrom(const HeatmapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.HeatmapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeatmapData::IsInitialized() const {
  return true;
}

void HeatmapData::InternalSwap(HeatmapData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  selected_sample_names_.InternalSwap(&other->selected_sample_names_);
  selected_transitions_.InternalSwap(&other->selected_transitions_);
  selected_transition_groups_.InternalSwap(&other->selected_transition_groups_);
  header_row_.InternalSwap(&other->header_row_);
  header_column_.InternalSwap(&other->header_column_);
  column_data_.InternalSwap(&other->column_data_);
  x_axis_title_.Swap(&other->x_axis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  y_axis_title_.Swap(&other->y_axis_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selected_feature_.Swap(&other->selected_feature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeatmapData, feat_value_max_)
      + sizeof(HeatmapData::feat_value_max_)
      - PROTOBUF_FIELD_OFFSET(HeatmapData, feat_value_min_)>(
          reinterpret_cast<char*>(&feat_value_min_),
          reinterpret_cast<char*>(&other->feat_value_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeatmapData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkflowResult::_Internal {
 public:
  static const ::SmartPeakServer::GraphData& graph_data(const WorkflowResult* msg);
  static const ::SmartPeakServer::HeatmapData& heatmap_data(const WorkflowResult* msg);
};

const ::SmartPeakServer::GraphData&
WorkflowResult::_Internal::graph_data(const WorkflowResult* msg) {
  return *msg->graph_data_;
}
const ::SmartPeakServer::HeatmapData&
WorkflowResult::_Internal::heatmap_data(const WorkflowResult* msg) {
  return *msg->heatmap_data_;
}
WorkflowResult::WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.WorkflowResult)
}
WorkflowResult::WorkflowResult(const WorkflowResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status_code().empty()) {
    status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_code(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  path_to_results_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path_to_results().empty()) {
    path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path_to_results(), 
      GetArena());
  }
  if (from._internal_has_graph_data()) {
    graph_data_ = new ::SmartPeakServer::GraphData(*from.graph_data_);
  } else {
    graph_data_ = nullptr;
  }
  if (from._internal_has_heatmap_data()) {
    heatmap_data_ = new ::SmartPeakServer::HeatmapData(*from.heatmap_data_);
  } else {
    heatmap_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.WorkflowResult)
}

void WorkflowResult::SharedCtor() {
status_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_to_results_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&graph_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heatmap_data_) -
    reinterpret_cast<char*>(&graph_data_)) + sizeof(heatmap_data_));
}

WorkflowResult::~WorkflowResult() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.WorkflowResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkflowResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_to_results_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete graph_data_;
  if (this != internal_default_instance()) delete heatmap_data_;
}

void WorkflowResult::ArenaDtor(void* object) {
  WorkflowResult* _this = reinterpret_cast< WorkflowResult* >(object);
  (void)_this;
}
void WorkflowResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.WorkflowResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_.ClearToEmpty();
  session_id_.ClearToEmpty();
  path_to_results_.ClearToEmpty();
  if (GetArena() == nullptr && graph_data_ != nullptr) {
    delete graph_data_;
  }
  graph_data_ = nullptr;
  if (GetArena() == nullptr && heatmap_data_ != nullptr) {
    delete heatmap_data_;
  }
  heatmap_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkflowResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowResult.status_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowResult.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path_to_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path_to_results();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.WorkflowResult.path_to_results"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SmartPeakServer.GraphData graph_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SmartPeakServer.HeatmapData heatmap_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_heatmap_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkflowResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.WorkflowResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status_code = 1;
  if (this->status_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_code().data(), static_cast<int>(this->_internal_status_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowResult.status_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status_code(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowResult.session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session_id(), target);
  }

  // string path_to_results = 3;
  if (this->path_to_results().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_to_results().data(), static_cast<int>(this->_internal_path_to_results().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.WorkflowResult.path_to_results");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path_to_results(), target);
  }

  // .SmartPeakServer.GraphData graph_data = 4;
  if (this->has_graph_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::graph_data(this), target, stream);
  }

  // .SmartPeakServer.HeatmapData heatmap_data = 5;
  if (this->has_heatmap_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::heatmap_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.WorkflowResult)
  return target;
}

size_t WorkflowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.WorkflowResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_code = 1;
  if (this->status_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_code());
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string path_to_results = 3;
  if (this->path_to_results().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_to_results());
  }

  // .SmartPeakServer.GraphData graph_data = 4;
  if (this->has_graph_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_data_);
  }

  // .SmartPeakServer.HeatmapData heatmap_data = 5;
  if (this->has_heatmap_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heatmap_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkflowResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.WorkflowResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.WorkflowResult)
    MergeFrom(*source);
  }
}

void WorkflowResult::MergeFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.WorkflowResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code().size() > 0) {
    _internal_set_status_code(from._internal_status_code());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.path_to_results().size() > 0) {
    _internal_set_path_to_results(from._internal_path_to_results());
  }
  if (from.has_graph_data()) {
    _internal_mutable_graph_data()->::SmartPeakServer::GraphData::MergeFrom(from._internal_graph_data());
  }
  if (from.has_heatmap_data()) {
    _internal_mutable_heatmap_data()->::SmartPeakServer::HeatmapData::MergeFrom(from._internal_heatmap_data());
  }
}

void WorkflowResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowResult::CopyFrom(const WorkflowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.WorkflowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowResult::IsInitialized() const {
  return true;
}

void WorkflowResult::InternalSwap(WorkflowResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_code_.Swap(&other->status_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  path_to_results_.Swap(&other->path_to_results_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkflowResult, heatmap_data_)
      + sizeof(WorkflowResult::heatmap_data_)
      - PROTOBUF_FIELD_OFFSET(WorkflowResult, graph_data_)>(
          reinterpret_cast<char*>(&graph_data_),
          reinterpret_cast<char*>(&other->graph_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InquireLogs::_Internal {
 public:
};

InquireLogs::InquireLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.InquireLogs)
}
InquireLogs::InquireLogs(const InquireLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nr_lines_ = from.nr_lines_;
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.InquireLogs)
}

void InquireLogs::SharedCtor() {
nr_lines_ = 0;
}

InquireLogs::~InquireLogs() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.InquireLogs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InquireLogs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InquireLogs::ArenaDtor(void* object) {
  InquireLogs* _this = reinterpret_cast< InquireLogs* >(object);
  (void)_this;
}
void InquireLogs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InquireLogs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InquireLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.InquireLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nr_lines_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InquireLogs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nr_lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nr_lines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InquireLogs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.InquireLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nr_lines = 1;
  if (this->nr_lines() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nr_lines(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.InquireLogs)
  return target;
}

size_t InquireLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.InquireLogs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nr_lines = 1;
  if (this->nr_lines() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nr_lines());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InquireLogs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.InquireLogs)
  GOOGLE_DCHECK_NE(&from, this);
  const InquireLogs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InquireLogs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.InquireLogs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.InquireLogs)
    MergeFrom(*source);
  }
}

void InquireLogs::MergeFrom(const InquireLogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.InquireLogs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nr_lines() != 0) {
    _internal_set_nr_lines(from._internal_nr_lines());
  }
}

void InquireLogs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.InquireLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InquireLogs::CopyFrom(const InquireLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.InquireLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InquireLogs::IsInitialized() const {
  return true;
}

void InquireLogs::InternalSwap(InquireLogs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nr_lines_, other->nr_lines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InquireLogs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogStream::_Internal {
 public:
};

LogStream::LogStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SmartPeakServer.LogStream)
}
LogStream::LogStream(const LogStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_line().empty()) {
    log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_line(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SmartPeakServer.LogStream)
}

void LogStream::SharedCtor() {
log_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogStream::~LogStream() {
  // @@protoc_insertion_point(destructor:SmartPeakServer.LogStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  log_line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogStream::ArenaDtor(void* object) {
  LogStream* _this = reinterpret_cast< LogStream* >(object);
  (void)_this;
}
void LogStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogStream::Clear() {
// @@protoc_insertion_point(message_clear_start:SmartPeakServer.LogStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_line_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string log_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_log_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SmartPeakServer.LogStream.log_line"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmartPeakServer.LogStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_line = 1;
  if (this->log_line().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_line().data(), static_cast<int>(this->_internal_log_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SmartPeakServer.LogStream.log_line");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_log_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmartPeakServer.LogStream)
  return target;
}

size_t LogStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmartPeakServer.LogStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_line = 1;
  if (this->log_line().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmartPeakServer.LogStream)
  GOOGLE_DCHECK_NE(&from, this);
  const LogStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmartPeakServer.LogStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmartPeakServer.LogStream)
    MergeFrom(*source);
  }
}

void LogStream::MergeFrom(const LogStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmartPeakServer.LogStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_line().size() > 0) {
    _internal_set_log_line(from._internal_log_line());
  }
}

void LogStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmartPeakServer.LogStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStream::CopyFrom(const LogStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmartPeakServer.LogStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStream::IsInitialized() const {
  return true;
}

void LogStream::InternalSwap(LogStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  log_line_.Swap(&other->log_line_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogStream::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SmartPeakServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SmartPeakServer::WorkflowParameters* Arena::CreateMaybeMessage< ::SmartPeakServer::WorkflowParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::WorkflowParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::SingleAxisData* Arena::CreateMaybeMessage< ::SmartPeakServer::SingleAxisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::SingleAxisData >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::GraphData* Arena::CreateMaybeMessage< ::SmartPeakServer::GraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::GraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::HeatmapData* Arena::CreateMaybeMessage< ::SmartPeakServer::HeatmapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::HeatmapData >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::WorkflowResult* Arena::CreateMaybeMessage< ::SmartPeakServer::WorkflowResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::WorkflowResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::InquireLogs* Arena::CreateMaybeMessage< ::SmartPeakServer::InquireLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::InquireLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::SmartPeakServer::LogStream* Arena::CreateMaybeMessage< ::SmartPeakServer::LogStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SmartPeakServer::LogStream >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
