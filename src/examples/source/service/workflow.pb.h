// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_workflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_workflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workflow_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_workflow_2eproto_metadata_getter(int index);
namespace SmartPeakServer {
class WorkflowParameters;
struct WorkflowParametersDefaultTypeInternal;
extern WorkflowParametersDefaultTypeInternal _WorkflowParameters_default_instance_;
class WorkflowStatus;
struct WorkflowStatusDefaultTypeInternal;
extern WorkflowStatusDefaultTypeInternal _WorkflowStatus_default_instance_;
}  // namespace SmartPeakServer
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartPeakServer::WorkflowParameters* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowParameters>(Arena*);
template<> ::SmartPeakServer::WorkflowStatus* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartPeakServer {

// ===================================================================

class WorkflowParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowParameters) */ {
 public:
  inline WorkflowParameters() : WorkflowParameters(nullptr) {}
  virtual ~WorkflowParameters();
  explicit constexpr WorkflowParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowParameters(const WorkflowParameters& from);
  WorkflowParameters(WorkflowParameters&& from) noexcept
    : WorkflowParameters() {
    *this = ::std::move(from);
  }

  inline WorkflowParameters& operator=(const WorkflowParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowParameters& operator=(WorkflowParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowParameters* internal_default_instance() {
    return reinterpret_cast<const WorkflowParameters*>(
               &_WorkflowParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowParameters& a, WorkflowParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowParameters* New() const final {
    return CreateMaybeMessage<WorkflowParameters>(nullptr);
  }

  WorkflowParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowParameters& from);
  void MergeFrom(const WorkflowParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowParameters";
  }
  protected:
  explicit WorkflowParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFileFieldNumber = 1,
  };
  // string sequence_file = 1;
  void clear_sequence_file();
  const std::string& sequence_file() const;
  void set_sequence_file(const std::string& value);
  void set_sequence_file(std::string&& value);
  void set_sequence_file(const char* value);
  void set_sequence_file(const char* value, size_t size);
  std::string* mutable_sequence_file();
  std::string* release_sequence_file();
  void set_allocated_sequence_file(std::string* sequence_file);
  private:
  const std::string& _internal_sequence_file() const;
  void _internal_set_sequence_file(const std::string& value);
  std::string* _internal_mutable_sequence_file();
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowStatus) */ {
 public:
  inline WorkflowStatus() : WorkflowStatus(nullptr) {}
  virtual ~WorkflowStatus();
  explicit constexpr WorkflowStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowStatus(const WorkflowStatus& from);
  WorkflowStatus(WorkflowStatus&& from) noexcept
    : WorkflowStatus() {
    *this = ::std::move(from);
  }

  inline WorkflowStatus& operator=(const WorkflowStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowStatus& operator=(WorkflowStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowStatus* internal_default_instance() {
    return reinterpret_cast<const WorkflowStatus*>(
               &_WorkflowStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkflowStatus& a, WorkflowStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowStatus* New() const final {
    return CreateMaybeMessage<WorkflowStatus>(nullptr);
  }

  WorkflowStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowStatus& from);
  void MergeFrom(const WorkflowStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowStatus";
  }
  protected:
  explicit WorkflowStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kPathToResultsFieldNumber = 4,
    kProgressInPercentFieldNumber = 1,
  };
  // string status_code = 2;
  void clear_status_code();
  const std::string& status_code() const;
  void set_status_code(const std::string& value);
  void set_status_code(std::string&& value);
  void set_status_code(const char* value);
  void set_status_code(const char* value, size_t size);
  std::string* mutable_status_code();
  std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string path_to_results = 4;
  void clear_path_to_results();
  const std::string& path_to_results() const;
  void set_path_to_results(const std::string& value);
  void set_path_to_results(std::string&& value);
  void set_path_to_results(const char* value);
  void set_path_to_results(const char* value, size_t size);
  std::string* mutable_path_to_results();
  std::string* release_path_to_results();
  void set_allocated_path_to_results(std::string* path_to_results);
  private:
  const std::string& _internal_path_to_results() const;
  void _internal_set_path_to_results(const std::string& value);
  std::string* _internal_mutable_path_to_results();
  public:

  // int32 progress_in_percent = 1;
  void clear_progress_in_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_in_percent() const;
  void set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_in_percent() const;
  void _internal_set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_to_results_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_in_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowParameters

// string sequence_file = 1;
inline void WorkflowParameters::clear_sequence_file() {
  sequence_file_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::sequence_file() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.sequence_file)
  return _internal_sequence_file();
}
inline void WorkflowParameters::set_sequence_file(const std::string& value) {
  _internal_set_sequence_file(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline std::string* WorkflowParameters::mutable_sequence_file() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.sequence_file)
  return _internal_mutable_sequence_file();
}
inline const std::string& WorkflowParameters::_internal_sequence_file() const {
  return sequence_file_.Get();
}
inline void WorkflowParameters::_internal_set_sequence_file(const std::string& value) {
  
  sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowParameters::set_sequence_file(std::string&& value) {
  
  sequence_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline void WorkflowParameters::set_sequence_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline void WorkflowParameters::set_sequence_file(const char* value,
    size_t size) {
  
  sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline std::string* WorkflowParameters::_internal_mutable_sequence_file() {
  
  return sequence_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowParameters::release_sequence_file() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.sequence_file)
  return sequence_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowParameters::set_allocated_sequence_file(std::string* sequence_file) {
  if (sequence_file != nullptr) {
    
  } else {
    
  }
  sequence_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.sequence_file)
}

// -------------------------------------------------------------------

// WorkflowStatus

// int32 progress_in_percent = 1;
inline void WorkflowStatus::clear_progress_in_percent() {
  progress_in_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkflowStatus::_internal_progress_in_percent() const {
  return progress_in_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkflowStatus::progress_in_percent() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowStatus.progress_in_percent)
  return _internal_progress_in_percent();
}
inline void WorkflowStatus::_internal_set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_in_percent_ = value;
}
inline void WorkflowStatus::set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_in_percent(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowStatus.progress_in_percent)
}

// string status_code = 2;
inline void WorkflowStatus::clear_status_code() {
  status_code_.ClearToEmpty();
}
inline const std::string& WorkflowStatus::status_code() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowStatus.status_code)
  return _internal_status_code();
}
inline void WorkflowStatus::set_status_code(const std::string& value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowStatus.status_code)
}
inline std::string* WorkflowStatus::mutable_status_code() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowStatus.status_code)
  return _internal_mutable_status_code();
}
inline const std::string& WorkflowStatus::_internal_status_code() const {
  return status_code_.Get();
}
inline void WorkflowStatus::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowStatus::set_status_code(std::string&& value) {
  
  status_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowStatus.status_code)
}
inline void WorkflowStatus::set_status_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowStatus.status_code)
}
inline void WorkflowStatus::set_status_code(const char* value,
    size_t size) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowStatus.status_code)
}
inline std::string* WorkflowStatus::_internal_mutable_status_code() {
  
  return status_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowStatus::release_status_code() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowStatus.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowStatus::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowStatus.status_code)
}

// string session_id = 3;
inline void WorkflowStatus::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& WorkflowStatus::session_id() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowStatus.session_id)
  return _internal_session_id();
}
inline void WorkflowStatus::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowStatus.session_id)
}
inline std::string* WorkflowStatus::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowStatus.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& WorkflowStatus::_internal_session_id() const {
  return session_id_.Get();
}
inline void WorkflowStatus::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowStatus::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowStatus.session_id)
}
inline void WorkflowStatus::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowStatus.session_id)
}
inline void WorkflowStatus::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowStatus.session_id)
}
inline std::string* WorkflowStatus::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowStatus::release_session_id() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowStatus.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowStatus::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowStatus.session_id)
}

// string path_to_results = 4;
inline void WorkflowStatus::clear_path_to_results() {
  path_to_results_.ClearToEmpty();
}
inline const std::string& WorkflowStatus::path_to_results() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowStatus.path_to_results)
  return _internal_path_to_results();
}
inline void WorkflowStatus::set_path_to_results(const std::string& value) {
  _internal_set_path_to_results(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowStatus.path_to_results)
}
inline std::string* WorkflowStatus::mutable_path_to_results() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowStatus.path_to_results)
  return _internal_mutable_path_to_results();
}
inline const std::string& WorkflowStatus::_internal_path_to_results() const {
  return path_to_results_.Get();
}
inline void WorkflowStatus::_internal_set_path_to_results(const std::string& value) {
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowStatus::set_path_to_results(std::string&& value) {
  
  path_to_results_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowStatus.path_to_results)
}
inline void WorkflowStatus::set_path_to_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowStatus.path_to_results)
}
inline void WorkflowStatus::set_path_to_results(const char* value,
    size_t size) {
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowStatus.path_to_results)
}
inline std::string* WorkflowStatus::_internal_mutable_path_to_results() {
  
  return path_to_results_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowStatus::release_path_to_results() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowStatus.path_to_results)
  return path_to_results_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowStatus::set_allocated_path_to_results(std::string* path_to_results) {
  if (path_to_results != nullptr) {
    
  } else {
    
  }
  path_to_results_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path_to_results,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowStatus.path_to_results)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartPeakServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto
