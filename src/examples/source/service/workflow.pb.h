// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_workflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_workflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workflow_2eproto;
namespace SmartPeakServer {
class InquireLogs;
struct InquireLogsDefaultTypeInternal;
extern InquireLogsDefaultTypeInternal _InquireLogs_default_instance_;
class Interrupter;
struct InterrupterDefaultTypeInternal;
extern InterrupterDefaultTypeInternal _Interrupter_default_instance_;
class LogStream;
struct LogStreamDefaultTypeInternal;
extern LogStreamDefaultTypeInternal _LogStream_default_instance_;
class ProgressInfo;
struct ProgressInfoDefaultTypeInternal;
extern ProgressInfoDefaultTypeInternal _ProgressInfo_default_instance_;
class WorkflowEvent;
struct WorkflowEventDefaultTypeInternal;
extern WorkflowEventDefaultTypeInternal _WorkflowEvent_default_instance_;
class WorkflowParameters;
struct WorkflowParametersDefaultTypeInternal;
extern WorkflowParametersDefaultTypeInternal _WorkflowParameters_default_instance_;
class WorkflowResult;
struct WorkflowResultDefaultTypeInternal;
extern WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
}  // namespace SmartPeakServer
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartPeakServer::InquireLogs* Arena::CreateMaybeMessage<::SmartPeakServer::InquireLogs>(Arena*);
template<> ::SmartPeakServer::Interrupter* Arena::CreateMaybeMessage<::SmartPeakServer::Interrupter>(Arena*);
template<> ::SmartPeakServer::LogStream* Arena::CreateMaybeMessage<::SmartPeakServer::LogStream>(Arena*);
template<> ::SmartPeakServer::ProgressInfo* Arena::CreateMaybeMessage<::SmartPeakServer::ProgressInfo>(Arena*);
template<> ::SmartPeakServer::WorkflowEvent* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowEvent>(Arena*);
template<> ::SmartPeakServer::WorkflowParameters* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowParameters>(Arena*);
template<> ::SmartPeakServer::WorkflowResult* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartPeakServer {

enum WorkflowParameters_ExportReport : int {
  WorkflowParameters_ExportReport_ALL = 0,
  WorkflowParameters_ExportReport_FEATUREDB = 1,
  WorkflowParameters_ExportReport_PIVOTTABLE = 2,
  WorkflowParameters_ExportReport_WorkflowParameters_ExportReport_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorkflowParameters_ExportReport_WorkflowParameters_ExportReport_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorkflowParameters_ExportReport_IsValid(int value);
constexpr WorkflowParameters_ExportReport WorkflowParameters_ExportReport_ExportReport_MIN = WorkflowParameters_ExportReport_ALL;
constexpr WorkflowParameters_ExportReport WorkflowParameters_ExportReport_ExportReport_MAX = WorkflowParameters_ExportReport_PIVOTTABLE;
constexpr int WorkflowParameters_ExportReport_ExportReport_ARRAYSIZE = WorkflowParameters_ExportReport_ExportReport_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowParameters_ExportReport_descriptor();
template<typename T>
inline const std::string& WorkflowParameters_ExportReport_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkflowParameters_ExportReport>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkflowParameters_ExportReport_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkflowParameters_ExportReport_descriptor(), enum_t_value);
}
inline bool WorkflowParameters_ExportReport_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkflowParameters_ExportReport* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkflowParameters_ExportReport>(
    WorkflowParameters_ExportReport_descriptor(), name, value);
}
enum LogStream_LogSeverity : int {
  LogStream_LogSeverity_NONE = 0,
  LogStream_LogSeverity_FATAL = 1,
  LogStream_LogSeverity_ERROR = 2,
  LogStream_LogSeverity_WARNING = 3,
  LogStream_LogSeverity_INFO = 4,
  LogStream_LogSeverity_DEBUG = 5,
  LogStream_LogSeverity_VERBOSE = 6,
  LogStream_LogSeverity_LogStream_LogSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogStream_LogSeverity_LogStream_LogSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogStream_LogSeverity_IsValid(int value);
constexpr LogStream_LogSeverity LogStream_LogSeverity_LogSeverity_MIN = LogStream_LogSeverity_NONE;
constexpr LogStream_LogSeverity LogStream_LogSeverity_LogSeverity_MAX = LogStream_LogSeverity_VERBOSE;
constexpr int LogStream_LogSeverity_LogSeverity_ARRAYSIZE = LogStream_LogSeverity_LogSeverity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogStream_LogSeverity_descriptor();
template<typename T>
inline const std::string& LogStream_LogSeverity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogStream_LogSeverity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogStream_LogSeverity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogStream_LogSeverity_descriptor(), enum_t_value);
}
inline bool LogStream_LogSeverity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogStream_LogSeverity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogStream_LogSeverity>(
    LogStream_LogSeverity_descriptor(), name, value);
}
// ===================================================================

class WorkflowParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowParameters) */ {
 public:
  inline WorkflowParameters() : WorkflowParameters(nullptr) {}
  ~WorkflowParameters() override;
  explicit constexpr WorkflowParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowParameters(const WorkflowParameters& from);
  WorkflowParameters(WorkflowParameters&& from) noexcept
    : WorkflowParameters() {
    *this = ::std::move(from);
  }

  inline WorkflowParameters& operator=(const WorkflowParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowParameters& operator=(WorkflowParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowParameters* internal_default_instance() {
    return reinterpret_cast<const WorkflowParameters*>(
               &_WorkflowParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowParameters& a, WorkflowParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowParameters* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowParameters* New() const final {
    return new WorkflowParameters();
  }

  WorkflowParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkflowParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorkflowParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowParameters";
  }
  protected:
  explicit WorkflowParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkflowParameters_ExportReport ExportReport;
  static constexpr ExportReport ALL =
    WorkflowParameters_ExportReport_ALL;
  static constexpr ExportReport FEATUREDB =
    WorkflowParameters_ExportReport_FEATUREDB;
  static constexpr ExportReport PIVOTTABLE =
    WorkflowParameters_ExportReport_PIVOTTABLE;
  static inline bool ExportReport_IsValid(int value) {
    return WorkflowParameters_ExportReport_IsValid(value);
  }
  static constexpr ExportReport ExportReport_MIN =
    WorkflowParameters_ExportReport_ExportReport_MIN;
  static constexpr ExportReport ExportReport_MAX =
    WorkflowParameters_ExportReport_ExportReport_MAX;
  static constexpr int ExportReport_ARRAYSIZE =
    WorkflowParameters_ExportReport_ExportReport_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExportReport_descriptor() {
    return WorkflowParameters_ExportReport_descriptor();
  }
  template<typename T>
  static inline const std::string& ExportReport_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExportReport>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExportReport_Name.");
    return WorkflowParameters_ExportReport_Name(enum_t_value);
  }
  static inline bool ExportReport_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExportReport* value) {
    return WorkflowParameters_ExportReport_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetPathFieldNumber = 1,
    kReportMetadataFieldNumber = 3,
    kReportSampleTypesFieldNumber = 4,
    kIntegrityFieldNumber = 5,
    kExportFieldNumber = 2,
  };
  // string dataset_path = 1;
  void clear_dataset_path();
  const std::string& dataset_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataset_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataset_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_dataset_path();
  void set_allocated_dataset_path(std::string* dataset_path);
  private:
  const std::string& _internal_dataset_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataset_path(const std::string& value);
  std::string* _internal_mutable_dataset_path();
  public:

  // string report_metadata = 3;
  void clear_report_metadata();
  const std::string& report_metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_metadata();
  PROTOBUF_MUST_USE_RESULT std::string* release_report_metadata();
  void set_allocated_report_metadata(std::string* report_metadata);
  private:
  const std::string& _internal_report_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_metadata(const std::string& value);
  std::string* _internal_mutable_report_metadata();
  public:

  // string report_sample_types = 4;
  void clear_report_sample_types();
  const std::string& report_sample_types() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_sample_types(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_sample_types();
  PROTOBUF_MUST_USE_RESULT std::string* release_report_sample_types();
  void set_allocated_report_sample_types(std::string* report_sample_types);
  private:
  const std::string& _internal_report_sample_types() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_sample_types(const std::string& value);
  std::string* _internal_mutable_report_sample_types();
  public:

  // string integrity = 5;
  void clear_integrity();
  const std::string& integrity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integrity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integrity();
  PROTOBUF_MUST_USE_RESULT std::string* release_integrity();
  void set_allocated_integrity(std::string* integrity);
  private:
  const std::string& _internal_integrity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integrity(const std::string& value);
  std::string* _internal_mutable_integrity();
  public:

  // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
  void clear_export_();
  ::SmartPeakServer::WorkflowParameters_ExportReport export_() const;
  void set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value);
  private:
  ::SmartPeakServer::WorkflowParameters_ExportReport _internal_export_() const;
  void _internal_set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataset_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_sample_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integrity_;
  int export__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class Interrupter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.Interrupter) */ {
 public:
  inline Interrupter() : Interrupter(nullptr) {}
  ~Interrupter() override;
  explicit constexpr Interrupter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interrupter(const Interrupter& from);
  Interrupter(Interrupter&& from) noexcept
    : Interrupter() {
    *this = ::std::move(from);
  }

  inline Interrupter& operator=(const Interrupter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interrupter& operator=(Interrupter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interrupter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interrupter* internal_default_instance() {
    return reinterpret_cast<const Interrupter*>(
               &_Interrupter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Interrupter& a, Interrupter& b) {
    a.Swap(&b);
  }
  inline void Swap(Interrupter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interrupter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interrupter* New() const final {
    return new Interrupter();
  }

  Interrupter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interrupter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interrupter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interrupter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interrupter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.Interrupter";
  }
  protected:
  explicit Interrupter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToInterruptFieldNumber = 1,
    kIsInterruptedFieldNumber = 2,
  };
  // bool to_interrupt = 1;
  void clear_to_interrupt();
  bool to_interrupt() const;
  void set_to_interrupt(bool value);
  private:
  bool _internal_to_interrupt() const;
  void _internal_set_to_interrupt(bool value);
  public:

  // bool is_interrupted = 2;
  void clear_is_interrupted();
  bool is_interrupted() const;
  void set_is_interrupted(bool value);
  private:
  bool _internal_is_interrupted() const;
  void _internal_set_is_interrupted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.Interrupter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool to_interrupt_;
  bool is_interrupted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowResult) */ {
 public:
  inline WorkflowResult() : WorkflowResult(nullptr) {}
  ~WorkflowResult() override;
  explicit constexpr WorkflowResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowResult(const WorkflowResult& from);
  WorkflowResult(WorkflowResult&& from) noexcept
    : WorkflowResult() {
    *this = ::std::move(from);
  }

  inline WorkflowResult& operator=(const WorkflowResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowResult& operator=(WorkflowResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowResult* internal_default_instance() {
    return reinterpret_cast<const WorkflowResult*>(
               &_WorkflowResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkflowResult& a, WorkflowResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowResult* New() const final {
    return new WorkflowResult();
  }

  WorkflowResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkflowResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorkflowResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowResult";
  }
  protected:
  explicit WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kPathToResultsFieldNumber = 3,
  };
  // string status_code = 1;
  void clear_status_code();
  const std::string& status_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string path_to_results = 3;
  void clear_path_to_results();
  const std::string& path_to_results() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_to_results(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_to_results();
  PROTOBUF_MUST_USE_RESULT std::string* release_path_to_results();
  void set_allocated_path_to_results(std::string* path_to_results);
  private:
  const std::string& _internal_path_to_results() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_to_results(const std::string& value);
  std::string* _internal_mutable_path_to_results();
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_to_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class InquireLogs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.InquireLogs) */ {
 public:
  inline InquireLogs() : InquireLogs(nullptr) {}
  ~InquireLogs() override;
  explicit constexpr InquireLogs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InquireLogs(const InquireLogs& from);
  InquireLogs(InquireLogs&& from) noexcept
    : InquireLogs() {
    *this = ::std::move(from);
  }

  inline InquireLogs& operator=(const InquireLogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline InquireLogs& operator=(InquireLogs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InquireLogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const InquireLogs* internal_default_instance() {
    return reinterpret_cast<const InquireLogs*>(
               &_InquireLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InquireLogs& a, InquireLogs& b) {
    a.Swap(&b);
  }
  inline void Swap(InquireLogs* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InquireLogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InquireLogs* New() const final {
    return new InquireLogs();
  }

  InquireLogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InquireLogs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InquireLogs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InquireLogs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InquireLogs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.InquireLogs";
  }
  protected:
  explicit InquireLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNrLinesFieldNumber = 1,
  };
  // int32 nr_lines = 1;
  void clear_nr_lines();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_lines() const;
  void set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nr_lines() const;
  void _internal_set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.InquireLogs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_lines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class LogStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.LogStream) */ {
 public:
  inline LogStream() : LogStream(nullptr) {}
  ~LogStream() override;
  explicit constexpr LogStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogStream(const LogStream& from);
  LogStream(LogStream&& from) noexcept
    : LogStream() {
    *this = ::std::move(from);
  }

  inline LogStream& operator=(const LogStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStream& operator=(LogStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogStream* internal_default_instance() {
    return reinterpret_cast<const LogStream*>(
               &_LogStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogStream& a, LogStream& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStream* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogStream* New() const final {
    return new LogStream();
  }

  LogStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogStream& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.LogStream";
  }
  protected:
  explicit LogStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogStream_LogSeverity LogSeverity;
  static constexpr LogSeverity NONE =
    LogStream_LogSeverity_NONE;
  static constexpr LogSeverity FATAL =
    LogStream_LogSeverity_FATAL;
  static constexpr LogSeverity ERROR =
    LogStream_LogSeverity_ERROR;
  static constexpr LogSeverity WARNING =
    LogStream_LogSeverity_WARNING;
  static constexpr LogSeverity INFO =
    LogStream_LogSeverity_INFO;
  static constexpr LogSeverity DEBUG =
    LogStream_LogSeverity_DEBUG;
  static constexpr LogSeverity VERBOSE =
    LogStream_LogSeverity_VERBOSE;
  static inline bool LogSeverity_IsValid(int value) {
    return LogStream_LogSeverity_IsValid(value);
  }
  static constexpr LogSeverity LogSeverity_MIN =
    LogStream_LogSeverity_LogSeverity_MIN;
  static constexpr LogSeverity LogSeverity_MAX =
    LogStream_LogSeverity_LogSeverity_MAX;
  static constexpr int LogSeverity_ARRAYSIZE =
    LogStream_LogSeverity_LogSeverity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogSeverity_descriptor() {
    return LogStream_LogSeverity_descriptor();
  }
  template<typename T>
  static inline const std::string& LogSeverity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogSeverity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogSeverity_Name.");
    return LogStream_LogSeverity_Name(enum_t_value);
  }
  static inline bool LogSeverity_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogSeverity* value) {
    return LogStream_LogSeverity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLogLineFieldNumber = 1,
    kLogSeverityFieldNumber = 2,
  };
  // string log_line = 1;
  void clear_log_line();
  const std::string& log_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_line();
  PROTOBUF_MUST_USE_RESULT std::string* release_log_line();
  void set_allocated_log_line(std::string* log_line);
  private:
  const std::string& _internal_log_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_line(const std::string& value);
  std::string* _internal_mutable_log_line();
  public:

  // .SmartPeakServer.LogStream.LogSeverity log_severity = 2;
  void clear_log_severity();
  ::SmartPeakServer::LogStream_LogSeverity log_severity() const;
  void set_log_severity(::SmartPeakServer::LogStream_LogSeverity value);
  private:
  ::SmartPeakServer::LogStream_LogSeverity _internal_log_severity() const;
  void _internal_set_log_severity(::SmartPeakServer::LogStream_LogSeverity value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.LogStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_line_;
  int log_severity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class ProgressInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.ProgressInfo) */ {
 public:
  inline ProgressInfo() : ProgressInfo(nullptr) {}
  ~ProgressInfo() override;
  explicit constexpr ProgressInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProgressInfo(const ProgressInfo& from);
  ProgressInfo(ProgressInfo&& from) noexcept
    : ProgressInfo() {
    *this = ::std::move(from);
  }

  inline ProgressInfo& operator=(const ProgressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgressInfo& operator=(ProgressInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProgressInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProgressInfo* internal_default_instance() {
    return reinterpret_cast<const ProgressInfo*>(
               &_ProgressInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProgressInfo& a, ProgressInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgressInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgressInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgressInfo* New() const final {
    return new ProgressInfo();
  }

  ProgressInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgressInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProgressInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProgressInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgressInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.ProgressInfo";
  }
  protected:
  explicit ProgressInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // string status_code = 1;
  void clear_status_code();
  const std::string& status_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.ProgressInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowEvent) */ {
 public:
  inline WorkflowEvent() : WorkflowEvent(nullptr) {}
  ~WorkflowEvent() override;
  explicit constexpr WorkflowEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowEvent(const WorkflowEvent& from);
  WorkflowEvent(WorkflowEvent&& from) noexcept
    : WorkflowEvent() {
    *this = ::std::move(from);
  }

  inline WorkflowEvent& operator=(const WorkflowEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowEvent& operator=(WorkflowEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowEvent* internal_default_instance() {
    return reinterpret_cast<const WorkflowEvent*>(
               &_WorkflowEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WorkflowEvent& a, WorkflowEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowEvent* New() const final {
    return new WorkflowEvent();
  }

  WorkflowEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkflowEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorkflowEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowEvent";
  }
  protected:
  explicit WorkflowEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandListFieldNumber = 4,
    kEventNameFieldNumber = 1,
    kItemNameFieldNumber = 3,
    kEventIndexFieldNumber = 2,
  };
  // repeated string command_list = 4;
  int command_list_size() const;
  private:
  int _internal_command_list_size() const;
  public:
  void clear_command_list();
  const std::string& command_list(int index) const;
  std::string* mutable_command_list(int index);
  void set_command_list(int index, const std::string& value);
  void set_command_list(int index, std::string&& value);
  void set_command_list(int index, const char* value);
  void set_command_list(int index, const char* value, size_t size);
  std::string* add_command_list();
  void add_command_list(const std::string& value);
  void add_command_list(std::string&& value);
  void add_command_list(const char* value);
  void add_command_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_list();
  private:
  const std::string& _internal_command_list(int index) const;
  std::string* _internal_add_command_list();
  public:

  // string event_name = 1;
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // string item_name = 3;
  void clear_item_name();
  const std::string& item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_item_name();
  void set_allocated_item_name(std::string* item_name);
  private:
  const std::string& _internal_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_name(const std::string& value);
  std::string* _internal_mutable_item_name();
  public:

  // int64 event_index = 2;
  void clear_event_index();
  ::PROTOBUF_NAMESPACE_ID::int64 event_index() const;
  void set_event_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_event_index() const;
  void _internal_set_event_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 event_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowParameters

// string dataset_path = 1;
inline void WorkflowParameters::clear_dataset_path() {
  dataset_path_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::dataset_path() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.dataset_path)
  return _internal_dataset_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowParameters::set_dataset_path(ArgT0&& arg0, ArgT... args) {
 
 dataset_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.dataset_path)
}
inline std::string* WorkflowParameters::mutable_dataset_path() {
  std::string* _s = _internal_mutable_dataset_path();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.dataset_path)
  return _s;
}
inline const std::string& WorkflowParameters::_internal_dataset_path() const {
  return dataset_path_.Get();
}
inline void WorkflowParameters::_internal_set_dataset_path(const std::string& value) {
  
  dataset_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::_internal_mutable_dataset_path() {
  
  return dataset_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::release_dataset_path() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.dataset_path)
  return dataset_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowParameters::set_allocated_dataset_path(std::string* dataset_path) {
  if (dataset_path != nullptr) {
    
  } else {
    
  }
  dataset_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataset_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.dataset_path)
}

// .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
inline void WorkflowParameters::clear_export_() {
  export__ = 0;
}
inline ::SmartPeakServer::WorkflowParameters_ExportReport WorkflowParameters::_internal_export_() const {
  return static_cast< ::SmartPeakServer::WorkflowParameters_ExportReport >(export__);
}
inline ::SmartPeakServer::WorkflowParameters_ExportReport WorkflowParameters::export_() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.export)
  return _internal_export_();
}
inline void WorkflowParameters::_internal_set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value) {
  
  export__ = value;
}
inline void WorkflowParameters::set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value) {
  _internal_set_export_(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.export)
}

// string report_metadata = 3;
inline void WorkflowParameters::clear_report_metadata() {
  report_metadata_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::report_metadata() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.report_metadata)
  return _internal_report_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowParameters::set_report_metadata(ArgT0&& arg0, ArgT... args) {
 
 report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.report_metadata)
}
inline std::string* WorkflowParameters::mutable_report_metadata() {
  std::string* _s = _internal_mutable_report_metadata();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.report_metadata)
  return _s;
}
inline const std::string& WorkflowParameters::_internal_report_metadata() const {
  return report_metadata_.Get();
}
inline void WorkflowParameters::_internal_set_report_metadata(const std::string& value) {
  
  report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::_internal_mutable_report_metadata() {
  
  return report_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::release_report_metadata() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.report_metadata)
  return report_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowParameters::set_allocated_report_metadata(std::string* report_metadata) {
  if (report_metadata != nullptr) {
    
  } else {
    
  }
  report_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_metadata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.report_metadata)
}

// string report_sample_types = 4;
inline void WorkflowParameters::clear_report_sample_types() {
  report_sample_types_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::report_sample_types() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.report_sample_types)
  return _internal_report_sample_types();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowParameters::set_report_sample_types(ArgT0&& arg0, ArgT... args) {
 
 report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.report_sample_types)
}
inline std::string* WorkflowParameters::mutable_report_sample_types() {
  std::string* _s = _internal_mutable_report_sample_types();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.report_sample_types)
  return _s;
}
inline const std::string& WorkflowParameters::_internal_report_sample_types() const {
  return report_sample_types_.Get();
}
inline void WorkflowParameters::_internal_set_report_sample_types(const std::string& value) {
  
  report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::_internal_mutable_report_sample_types() {
  
  return report_sample_types_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::release_report_sample_types() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.report_sample_types)
  return report_sample_types_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowParameters::set_allocated_report_sample_types(std::string* report_sample_types) {
  if (report_sample_types != nullptr) {
    
  } else {
    
  }
  report_sample_types_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_sample_types,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.report_sample_types)
}

// string integrity = 5;
inline void WorkflowParameters::clear_integrity() {
  integrity_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::integrity() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.integrity)
  return _internal_integrity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowParameters::set_integrity(ArgT0&& arg0, ArgT... args) {
 
 integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.integrity)
}
inline std::string* WorkflowParameters::mutable_integrity() {
  std::string* _s = _internal_mutable_integrity();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.integrity)
  return _s;
}
inline const std::string& WorkflowParameters::_internal_integrity() const {
  return integrity_.Get();
}
inline void WorkflowParameters::_internal_set_integrity(const std::string& value) {
  
  integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::_internal_mutable_integrity() {
  
  return integrity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowParameters::release_integrity() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.integrity)
  return integrity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowParameters::set_allocated_integrity(std::string* integrity) {
  if (integrity != nullptr) {
    
  } else {
    
  }
  integrity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integrity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.integrity)
}

// -------------------------------------------------------------------

// Interrupter

// bool to_interrupt = 1;
inline void Interrupter::clear_to_interrupt() {
  to_interrupt_ = false;
}
inline bool Interrupter::_internal_to_interrupt() const {
  return to_interrupt_;
}
inline bool Interrupter::to_interrupt() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.Interrupter.to_interrupt)
  return _internal_to_interrupt();
}
inline void Interrupter::_internal_set_to_interrupt(bool value) {
  
  to_interrupt_ = value;
}
inline void Interrupter::set_to_interrupt(bool value) {
  _internal_set_to_interrupt(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.Interrupter.to_interrupt)
}

// bool is_interrupted = 2;
inline void Interrupter::clear_is_interrupted() {
  is_interrupted_ = false;
}
inline bool Interrupter::_internal_is_interrupted() const {
  return is_interrupted_;
}
inline bool Interrupter::is_interrupted() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.Interrupter.is_interrupted)
  return _internal_is_interrupted();
}
inline void Interrupter::_internal_set_is_interrupted(bool value) {
  
  is_interrupted_ = value;
}
inline void Interrupter::set_is_interrupted(bool value) {
  _internal_set_is_interrupted(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.Interrupter.is_interrupted)
}

// -------------------------------------------------------------------

// WorkflowResult

// string status_code = 1;
inline void WorkflowResult::clear_status_code() {
  status_code_.ClearToEmpty();
}
inline const std::string& WorkflowResult::status_code() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.status_code)
  return _internal_status_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowResult::set_status_code(ArgT0&& arg0, ArgT... args) {
 
 status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.status_code)
}
inline std::string* WorkflowResult::mutable_status_code() {
  std::string* _s = _internal_mutable_status_code();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.status_code)
  return _s;
}
inline const std::string& WorkflowResult::_internal_status_code() const {
  return status_code_.Get();
}
inline void WorkflowResult::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowResult::_internal_mutable_status_code() {
  
  return status_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowResult::release_status_code() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowResult::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.status_code)
}

// string session_id = 2;
inline void WorkflowResult::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& WorkflowResult::session_id() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowResult::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.session_id)
}
inline std::string* WorkflowResult::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.session_id)
  return _s;
}
inline const std::string& WorkflowResult::_internal_session_id() const {
  return session_id_.Get();
}
inline void WorkflowResult::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowResult::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowResult::release_session_id() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowResult::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.session_id)
}

// string path_to_results = 3;
inline void WorkflowResult::clear_path_to_results() {
  path_to_results_.ClearToEmpty();
}
inline const std::string& WorkflowResult::path_to_results() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.path_to_results)
  return _internal_path_to_results();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowResult::set_path_to_results(ArgT0&& arg0, ArgT... args) {
 
 path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.path_to_results)
}
inline std::string* WorkflowResult::mutable_path_to_results() {
  std::string* _s = _internal_mutable_path_to_results();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.path_to_results)
  return _s;
}
inline const std::string& WorkflowResult::_internal_path_to_results() const {
  return path_to_results_.Get();
}
inline void WorkflowResult::_internal_set_path_to_results(const std::string& value) {
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowResult::_internal_mutable_path_to_results() {
  
  return path_to_results_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowResult::release_path_to_results() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.path_to_results)
  return path_to_results_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowResult::set_allocated_path_to_results(std::string* path_to_results) {
  if (path_to_results != nullptr) {
    
  } else {
    
  }
  path_to_results_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path_to_results,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.path_to_results)
}

// -------------------------------------------------------------------

// InquireLogs

// int32 nr_lines = 1;
inline void InquireLogs::clear_nr_lines() {
  nr_lines_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InquireLogs::_internal_nr_lines() const {
  return nr_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InquireLogs::nr_lines() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.InquireLogs.nr_lines)
  return _internal_nr_lines();
}
inline void InquireLogs::_internal_set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nr_lines_ = value;
}
inline void InquireLogs::set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nr_lines(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.InquireLogs.nr_lines)
}

// -------------------------------------------------------------------

// LogStream

// string log_line = 1;
inline void LogStream::clear_log_line() {
  log_line_.ClearToEmpty();
}
inline const std::string& LogStream::log_line() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.LogStream.log_line)
  return _internal_log_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogStream::set_log_line(ArgT0&& arg0, ArgT... args) {
 
 log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.LogStream.log_line)
}
inline std::string* LogStream::mutable_log_line() {
  std::string* _s = _internal_mutable_log_line();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.LogStream.log_line)
  return _s;
}
inline const std::string& LogStream::_internal_log_line() const {
  return log_line_.Get();
}
inline void LogStream::_internal_set_log_line(const std::string& value) {
  
  log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LogStream::_internal_mutable_log_line() {
  
  return log_line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LogStream::release_log_line() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.LogStream.log_line)
  return log_line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LogStream::set_allocated_log_line(std::string* log_line) {
  if (log_line != nullptr) {
    
  } else {
    
  }
  log_line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_line,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.LogStream.log_line)
}

// .SmartPeakServer.LogStream.LogSeverity log_severity = 2;
inline void LogStream::clear_log_severity() {
  log_severity_ = 0;
}
inline ::SmartPeakServer::LogStream_LogSeverity LogStream::_internal_log_severity() const {
  return static_cast< ::SmartPeakServer::LogStream_LogSeverity >(log_severity_);
}
inline ::SmartPeakServer::LogStream_LogSeverity LogStream::log_severity() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.LogStream.log_severity)
  return _internal_log_severity();
}
inline void LogStream::_internal_set_log_severity(::SmartPeakServer::LogStream_LogSeverity value) {
  
  log_severity_ = value;
}
inline void LogStream::set_log_severity(::SmartPeakServer::LogStream_LogSeverity value) {
  _internal_set_log_severity(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.LogStream.log_severity)
}

// -------------------------------------------------------------------

// ProgressInfo

// string status_code = 1;
inline void ProgressInfo::clear_status_code() {
  status_code_.ClearToEmpty();
}
inline const std::string& ProgressInfo::status_code() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.ProgressInfo.status_code)
  return _internal_status_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProgressInfo::set_status_code(ArgT0&& arg0, ArgT... args) {
 
 status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.ProgressInfo.status_code)
}
inline std::string* ProgressInfo::mutable_status_code() {
  std::string* _s = _internal_mutable_status_code();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.ProgressInfo.status_code)
  return _s;
}
inline const std::string& ProgressInfo::_internal_status_code() const {
  return status_code_.Get();
}
inline void ProgressInfo::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProgressInfo::_internal_mutable_status_code() {
  
  return status_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProgressInfo::release_status_code() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.ProgressInfo.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProgressInfo::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.ProgressInfo.status_code)
}

// -------------------------------------------------------------------

// WorkflowEvent

// string event_name = 1;
inline void WorkflowEvent::clear_event_name() {
  event_name_.ClearToEmpty();
}
inline const std::string& WorkflowEvent::event_name() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowEvent.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowEvent::set_event_name(ArgT0&& arg0, ArgT... args) {
 
 event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowEvent.event_name)
}
inline std::string* WorkflowEvent::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowEvent.event_name)
  return _s;
}
inline const std::string& WorkflowEvent::_internal_event_name() const {
  return event_name_.Get();
}
inline void WorkflowEvent::_internal_set_event_name(const std::string& value) {
  
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowEvent::_internal_mutable_event_name() {
  
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowEvent.event_name)
  return event_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowEvent.event_name)
}

// int64 event_index = 2;
inline void WorkflowEvent::clear_event_index() {
  event_index_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorkflowEvent::_internal_event_index() const {
  return event_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WorkflowEvent::event_index() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowEvent.event_index)
  return _internal_event_index();
}
inline void WorkflowEvent::_internal_set_event_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  event_index_ = value;
}
inline void WorkflowEvent::set_event_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_event_index(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowEvent.event_index)
}

// string item_name = 3;
inline void WorkflowEvent::clear_item_name() {
  item_name_.ClearToEmpty();
}
inline const std::string& WorkflowEvent::item_name() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowEvent.item_name)
  return _internal_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowEvent::set_item_name(ArgT0&& arg0, ArgT... args) {
 
 item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowEvent.item_name)
}
inline std::string* WorkflowEvent::mutable_item_name() {
  std::string* _s = _internal_mutable_item_name();
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowEvent.item_name)
  return _s;
}
inline const std::string& WorkflowEvent::_internal_item_name() const {
  return item_name_.Get();
}
inline void WorkflowEvent::_internal_set_item_name(const std::string& value) {
  
  item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowEvent::_internal_mutable_item_name() {
  
  return item_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowEvent::release_item_name() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowEvent.item_name)
  return item_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowEvent::set_allocated_item_name(std::string* item_name) {
  if (item_name != nullptr) {
    
  } else {
    
  }
  item_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowEvent.item_name)
}

// repeated string command_list = 4;
inline int WorkflowEvent::_internal_command_list_size() const {
  return command_list_.size();
}
inline int WorkflowEvent::command_list_size() const {
  return _internal_command_list_size();
}
inline void WorkflowEvent::clear_command_list() {
  command_list_.Clear();
}
inline std::string* WorkflowEvent::add_command_list() {
  std::string* _s = _internal_add_command_list();
  // @@protoc_insertion_point(field_add_mutable:SmartPeakServer.WorkflowEvent.command_list)
  return _s;
}
inline const std::string& WorkflowEvent::_internal_command_list(int index) const {
  return command_list_.Get(index);
}
inline const std::string& WorkflowEvent::command_list(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowEvent.command_list)
  return _internal_command_list(index);
}
inline std::string* WorkflowEvent::mutable_command_list(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowEvent.command_list)
  return command_list_.Mutable(index);
}
inline void WorkflowEvent::set_command_list(int index, const std::string& value) {
  command_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowEvent.command_list)
}
inline void WorkflowEvent::set_command_list(int index, std::string&& value) {
  command_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowEvent.command_list)
}
inline void WorkflowEvent::set_command_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowEvent.command_list)
}
inline void WorkflowEvent::set_command_list(int index, const char* value, size_t size) {
  command_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowEvent.command_list)
}
inline std::string* WorkflowEvent::_internal_add_command_list() {
  return command_list_.Add();
}
inline void WorkflowEvent::add_command_list(const std::string& value) {
  command_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartPeakServer.WorkflowEvent.command_list)
}
inline void WorkflowEvent::add_command_list(std::string&& value) {
  command_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartPeakServer.WorkflowEvent.command_list)
}
inline void WorkflowEvent::add_command_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartPeakServer.WorkflowEvent.command_list)
}
inline void WorkflowEvent::add_command_list(const char* value, size_t size) {
  command_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartPeakServer.WorkflowEvent.command_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WorkflowEvent::command_list() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.WorkflowEvent.command_list)
  return command_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WorkflowEvent::mutable_command_list() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.WorkflowEvent.command_list)
  return &command_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartPeakServer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SmartPeakServer::WorkflowParameters_ExportReport> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SmartPeakServer::WorkflowParameters_ExportReport>() {
  return ::SmartPeakServer::WorkflowParameters_ExportReport_descriptor();
}
template <> struct is_proto_enum< ::SmartPeakServer::LogStream_LogSeverity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SmartPeakServer::LogStream_LogSeverity>() {
  return ::SmartPeakServer::LogStream_LogSeverity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto
