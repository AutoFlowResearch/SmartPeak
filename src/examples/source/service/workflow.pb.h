// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workflow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_workflow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_workflow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_workflow_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_workflow_2eproto_metadata_getter(int index);
namespace SmartPeakServer {
class GraphData;
struct GraphDataDefaultTypeInternal;
extern GraphDataDefaultTypeInternal _GraphData_default_instance_;
class InquireLogs;
struct InquireLogsDefaultTypeInternal;
extern InquireLogsDefaultTypeInternal _InquireLogs_default_instance_;
class LogStream;
struct LogStreamDefaultTypeInternal;
extern LogStreamDefaultTypeInternal _LogStream_default_instance_;
class SingleAxisData;
struct SingleAxisDataDefaultTypeInternal;
extern SingleAxisDataDefaultTypeInternal _SingleAxisData_default_instance_;
class WorkflowParameters;
struct WorkflowParametersDefaultTypeInternal;
extern WorkflowParametersDefaultTypeInternal _WorkflowParameters_default_instance_;
class WorkflowResult;
struct WorkflowResultDefaultTypeInternal;
extern WorkflowResultDefaultTypeInternal _WorkflowResult_default_instance_;
}  // namespace SmartPeakServer
PROTOBUF_NAMESPACE_OPEN
template<> ::SmartPeakServer::GraphData* Arena::CreateMaybeMessage<::SmartPeakServer::GraphData>(Arena*);
template<> ::SmartPeakServer::InquireLogs* Arena::CreateMaybeMessage<::SmartPeakServer::InquireLogs>(Arena*);
template<> ::SmartPeakServer::LogStream* Arena::CreateMaybeMessage<::SmartPeakServer::LogStream>(Arena*);
template<> ::SmartPeakServer::SingleAxisData* Arena::CreateMaybeMessage<::SmartPeakServer::SingleAxisData>(Arena*);
template<> ::SmartPeakServer::WorkflowParameters* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowParameters>(Arena*);
template<> ::SmartPeakServer::WorkflowResult* Arena::CreateMaybeMessage<::SmartPeakServer::WorkflowResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SmartPeakServer {

enum WorkflowParameters_ExportReport : int {
  WorkflowParameters_ExportReport_ALL = 0,
  WorkflowParameters_ExportReport_FEATUREDB = 1,
  WorkflowParameters_ExportReport_PIVOTTABLE = 2,
  WorkflowParameters_ExportReport_WorkflowParameters_ExportReport_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorkflowParameters_ExportReport_WorkflowParameters_ExportReport_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorkflowParameters_ExportReport_IsValid(int value);
constexpr WorkflowParameters_ExportReport WorkflowParameters_ExportReport_ExportReport_MIN = WorkflowParameters_ExportReport_ALL;
constexpr WorkflowParameters_ExportReport WorkflowParameters_ExportReport_ExportReport_MAX = WorkflowParameters_ExportReport_PIVOTTABLE;
constexpr int WorkflowParameters_ExportReport_ExportReport_ARRAYSIZE = WorkflowParameters_ExportReport_ExportReport_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkflowParameters_ExportReport_descriptor();
template<typename T>
inline const std::string& WorkflowParameters_ExportReport_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorkflowParameters_ExportReport>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorkflowParameters_ExportReport_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorkflowParameters_ExportReport_descriptor(), enum_t_value);
}
inline bool WorkflowParameters_ExportReport_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorkflowParameters_ExportReport* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorkflowParameters_ExportReport>(
    WorkflowParameters_ExportReport_descriptor(), name, value);
}
// ===================================================================

class WorkflowParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowParameters) */ {
 public:
  inline WorkflowParameters() : WorkflowParameters(nullptr) {}
  virtual ~WorkflowParameters();
  explicit constexpr WorkflowParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowParameters(const WorkflowParameters& from);
  WorkflowParameters(WorkflowParameters&& from) noexcept
    : WorkflowParameters() {
    *this = ::std::move(from);
  }

  inline WorkflowParameters& operator=(const WorkflowParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowParameters& operator=(WorkflowParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowParameters* internal_default_instance() {
    return reinterpret_cast<const WorkflowParameters*>(
               &_WorkflowParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowParameters& a, WorkflowParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowParameters* New() const final {
    return CreateMaybeMessage<WorkflowParameters>(nullptr);
  }

  WorkflowParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowParameters& from);
  void MergeFrom(const WorkflowParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowParameters";
  }
  protected:
  explicit WorkflowParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef WorkflowParameters_ExportReport ExportReport;
  static constexpr ExportReport ALL =
    WorkflowParameters_ExportReport_ALL;
  static constexpr ExportReport FEATUREDB =
    WorkflowParameters_ExportReport_FEATUREDB;
  static constexpr ExportReport PIVOTTABLE =
    WorkflowParameters_ExportReport_PIVOTTABLE;
  static inline bool ExportReport_IsValid(int value) {
    return WorkflowParameters_ExportReport_IsValid(value);
  }
  static constexpr ExportReport ExportReport_MIN =
    WorkflowParameters_ExportReport_ExportReport_MIN;
  static constexpr ExportReport ExportReport_MAX =
    WorkflowParameters_ExportReport_ExportReport_MAX;
  static constexpr int ExportReport_ARRAYSIZE =
    WorkflowParameters_ExportReport_ExportReport_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExportReport_descriptor() {
    return WorkflowParameters_ExportReport_descriptor();
  }
  template<typename T>
  static inline const std::string& ExportReport_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExportReport>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExportReport_Name.");
    return WorkflowParameters_ExportReport_Name(enum_t_value);
  }
  static inline bool ExportReport_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExportReport* value) {
    return WorkflowParameters_ExportReport_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFileFieldNumber = 1,
    kReportMetadataFieldNumber = 3,
    kReportSampleTypesFieldNumber = 4,
    kIntegrityFieldNumber = 5,
    kExportFieldNumber = 2,
  };
  // string sequence_file = 1;
  void clear_sequence_file();
  const std::string& sequence_file() const;
  void set_sequence_file(const std::string& value);
  void set_sequence_file(std::string&& value);
  void set_sequence_file(const char* value);
  void set_sequence_file(const char* value, size_t size);
  std::string* mutable_sequence_file();
  std::string* release_sequence_file();
  void set_allocated_sequence_file(std::string* sequence_file);
  private:
  const std::string& _internal_sequence_file() const;
  void _internal_set_sequence_file(const std::string& value);
  std::string* _internal_mutable_sequence_file();
  public:

  // string report_metadata = 3;
  void clear_report_metadata();
  const std::string& report_metadata() const;
  void set_report_metadata(const std::string& value);
  void set_report_metadata(std::string&& value);
  void set_report_metadata(const char* value);
  void set_report_metadata(const char* value, size_t size);
  std::string* mutable_report_metadata();
  std::string* release_report_metadata();
  void set_allocated_report_metadata(std::string* report_metadata);
  private:
  const std::string& _internal_report_metadata() const;
  void _internal_set_report_metadata(const std::string& value);
  std::string* _internal_mutable_report_metadata();
  public:

  // string report_sample_types = 4;
  void clear_report_sample_types();
  const std::string& report_sample_types() const;
  void set_report_sample_types(const std::string& value);
  void set_report_sample_types(std::string&& value);
  void set_report_sample_types(const char* value);
  void set_report_sample_types(const char* value, size_t size);
  std::string* mutable_report_sample_types();
  std::string* release_report_sample_types();
  void set_allocated_report_sample_types(std::string* report_sample_types);
  private:
  const std::string& _internal_report_sample_types() const;
  void _internal_set_report_sample_types(const std::string& value);
  std::string* _internal_mutable_report_sample_types();
  public:

  // string integrity = 5;
  void clear_integrity();
  const std::string& integrity() const;
  void set_integrity(const std::string& value);
  void set_integrity(std::string&& value);
  void set_integrity(const char* value);
  void set_integrity(const char* value, size_t size);
  std::string* mutable_integrity();
  std::string* release_integrity();
  void set_allocated_integrity(std::string* integrity);
  private:
  const std::string& _internal_integrity() const;
  void _internal_set_integrity(const std::string& value);
  std::string* _internal_mutable_integrity();
  public:

  // .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
  void clear_export_();
  ::SmartPeakServer::WorkflowParameters_ExportReport export_() const;
  void set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value);
  private:
  ::SmartPeakServer::WorkflowParameters_ExportReport _internal_export_() const;
  void _internal_set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_sample_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integrity_;
  int export__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class SingleAxisData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.SingleAxisData) */ {
 public:
  inline SingleAxisData() : SingleAxisData(nullptr) {}
  virtual ~SingleAxisData();
  explicit constexpr SingleAxisData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleAxisData(const SingleAxisData& from);
  SingleAxisData(SingleAxisData&& from) noexcept
    : SingleAxisData() {
    *this = ::std::move(from);
  }

  inline SingleAxisData& operator=(const SingleAxisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleAxisData& operator=(SingleAxisData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleAxisData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleAxisData* internal_default_instance() {
    return reinterpret_cast<const SingleAxisData*>(
               &_SingleAxisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SingleAxisData& a, SingleAxisData& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleAxisData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleAxisData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleAxisData* New() const final {
    return CreateMaybeMessage<SingleAxisData>(nullptr);
  }

  SingleAxisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleAxisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleAxisData& from);
  void MergeFrom(const SingleAxisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleAxisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.SingleAxisData";
  }
  protected:
  explicit SingleAxisData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisDataFieldNumber = 1,
  };
  // repeated float axis_data = 1;
  int axis_data_size() const;
  private:
  int _internal_axis_data_size() const;
  public:
  void clear_axis_data();
  private:
  float _internal_axis_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_axis_data() const;
  void _internal_add_axis_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_axis_data();
  public:
  float axis_data(int index) const;
  void set_axis_data(int index, float value);
  void add_axis_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      axis_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_axis_data();

  // @@protoc_insertion_point(class_scope:SmartPeakServer.SingleAxisData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > axis_data_;
  mutable std::atomic<int> _axis_data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class GraphData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.GraphData) */ {
 public:
  inline GraphData() : GraphData(nullptr) {}
  virtual ~GraphData();
  explicit constexpr GraphData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphData(const GraphData& from);
  GraphData(GraphData&& from) noexcept
    : GraphData() {
    *this = ::std::move(from);
  }

  inline GraphData& operator=(const GraphData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphData& operator=(GraphData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphData* internal_default_instance() {
    return reinterpret_cast<const GraphData*>(
               &_GraphData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GraphData& a, GraphData& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphData* New() const final {
    return CreateMaybeMessage<GraphData>(nullptr);
  }

  GraphData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphData& from);
  void MergeFrom(const GraphData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.GraphData";
  }
  protected:
  explicit GraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriesNamesAreaFieldNumber = 1,
    kXDataFieldNumber = 2,
    kYDataFieldNumber = 3,
    kZDataFieldNumber = 4,
    kSeriesNamesScatterFieldNumber = 5,
    kXDataScatterFieldNumber = 6,
    kYDataScatterFieldNumber = 7,
    kXAxisTitleFieldNumber = 8,
    kYAxisTitleFieldNumber = 9,
    kZAxisTitleFieldNumber = 10,
    kXMinFieldNumber = 11,
    kXMaxFieldNumber = 12,
    kYMinFieldNumber = 13,
    kYMaxFieldNumber = 14,
    kNbPointsFieldNumber = 15,
    kMaxNbPointsFieldNumber = 16,
  };
  // repeated string series_names_area = 1;
  int series_names_area_size() const;
  private:
  int _internal_series_names_area_size() const;
  public:
  void clear_series_names_area();
  const std::string& series_names_area(int index) const;
  std::string* mutable_series_names_area(int index);
  void set_series_names_area(int index, const std::string& value);
  void set_series_names_area(int index, std::string&& value);
  void set_series_names_area(int index, const char* value);
  void set_series_names_area(int index, const char* value, size_t size);
  std::string* add_series_names_area();
  void add_series_names_area(const std::string& value);
  void add_series_names_area(std::string&& value);
  void add_series_names_area(const char* value);
  void add_series_names_area(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& series_names_area() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_series_names_area();
  private:
  const std::string& _internal_series_names_area(int index) const;
  std::string* _internal_add_series_names_area();
  public:

  // repeated .SmartPeakServer.SingleAxisData x_data = 2;
  int x_data_size() const;
  private:
  int _internal_x_data_size() const;
  public:
  void clear_x_data();
  ::SmartPeakServer::SingleAxisData* mutable_x_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
      mutable_x_data();
  private:
  const ::SmartPeakServer::SingleAxisData& _internal_x_data(int index) const;
  ::SmartPeakServer::SingleAxisData* _internal_add_x_data();
  public:
  const ::SmartPeakServer::SingleAxisData& x_data(int index) const;
  ::SmartPeakServer::SingleAxisData* add_x_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
      x_data() const;

  // repeated .SmartPeakServer.SingleAxisData y_data = 3;
  int y_data_size() const;
  private:
  int _internal_y_data_size() const;
  public:
  void clear_y_data();
  ::SmartPeakServer::SingleAxisData* mutable_y_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
      mutable_y_data();
  private:
  const ::SmartPeakServer::SingleAxisData& _internal_y_data(int index) const;
  ::SmartPeakServer::SingleAxisData* _internal_add_y_data();
  public:
  const ::SmartPeakServer::SingleAxisData& y_data(int index) const;
  ::SmartPeakServer::SingleAxisData* add_y_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
      y_data() const;

  // repeated .SmartPeakServer.SingleAxisData z_data = 4;
  int z_data_size() const;
  private:
  int _internal_z_data_size() const;
  public:
  void clear_z_data();
  ::SmartPeakServer::SingleAxisData* mutable_z_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
      mutable_z_data();
  private:
  const ::SmartPeakServer::SingleAxisData& _internal_z_data(int index) const;
  ::SmartPeakServer::SingleAxisData* _internal_add_z_data();
  public:
  const ::SmartPeakServer::SingleAxisData& z_data(int index) const;
  ::SmartPeakServer::SingleAxisData* add_z_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
      z_data() const;

  // repeated string series_names_scatter = 5;
  int series_names_scatter_size() const;
  private:
  int _internal_series_names_scatter_size() const;
  public:
  void clear_series_names_scatter();
  const std::string& series_names_scatter(int index) const;
  std::string* mutable_series_names_scatter(int index);
  void set_series_names_scatter(int index, const std::string& value);
  void set_series_names_scatter(int index, std::string&& value);
  void set_series_names_scatter(int index, const char* value);
  void set_series_names_scatter(int index, const char* value, size_t size);
  std::string* add_series_names_scatter();
  void add_series_names_scatter(const std::string& value);
  void add_series_names_scatter(std::string&& value);
  void add_series_names_scatter(const char* value);
  void add_series_names_scatter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& series_names_scatter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_series_names_scatter();
  private:
  const std::string& _internal_series_names_scatter(int index) const;
  std::string* _internal_add_series_names_scatter();
  public:

  // repeated .SmartPeakServer.SingleAxisData x_data_scatter = 6;
  int x_data_scatter_size() const;
  private:
  int _internal_x_data_scatter_size() const;
  public:
  void clear_x_data_scatter();
  ::SmartPeakServer::SingleAxisData* mutable_x_data_scatter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
      mutable_x_data_scatter();
  private:
  const ::SmartPeakServer::SingleAxisData& _internal_x_data_scatter(int index) const;
  ::SmartPeakServer::SingleAxisData* _internal_add_x_data_scatter();
  public:
  const ::SmartPeakServer::SingleAxisData& x_data_scatter(int index) const;
  ::SmartPeakServer::SingleAxisData* add_x_data_scatter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
      x_data_scatter() const;

  // repeated .SmartPeakServer.SingleAxisData y_data_scatter = 7;
  int y_data_scatter_size() const;
  private:
  int _internal_y_data_scatter_size() const;
  public:
  void clear_y_data_scatter();
  ::SmartPeakServer::SingleAxisData* mutable_y_data_scatter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
      mutable_y_data_scatter();
  private:
  const ::SmartPeakServer::SingleAxisData& _internal_y_data_scatter(int index) const;
  ::SmartPeakServer::SingleAxisData* _internal_add_y_data_scatter();
  public:
  const ::SmartPeakServer::SingleAxisData& y_data_scatter(int index) const;
  ::SmartPeakServer::SingleAxisData* add_y_data_scatter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
      y_data_scatter() const;

  // string x_axis_title = 8;
  void clear_x_axis_title();
  const std::string& x_axis_title() const;
  void set_x_axis_title(const std::string& value);
  void set_x_axis_title(std::string&& value);
  void set_x_axis_title(const char* value);
  void set_x_axis_title(const char* value, size_t size);
  std::string* mutable_x_axis_title();
  std::string* release_x_axis_title();
  void set_allocated_x_axis_title(std::string* x_axis_title);
  private:
  const std::string& _internal_x_axis_title() const;
  void _internal_set_x_axis_title(const std::string& value);
  std::string* _internal_mutable_x_axis_title();
  public:

  // string y_axis_title = 9;
  void clear_y_axis_title();
  const std::string& y_axis_title() const;
  void set_y_axis_title(const std::string& value);
  void set_y_axis_title(std::string&& value);
  void set_y_axis_title(const char* value);
  void set_y_axis_title(const char* value, size_t size);
  std::string* mutable_y_axis_title();
  std::string* release_y_axis_title();
  void set_allocated_y_axis_title(std::string* y_axis_title);
  private:
  const std::string& _internal_y_axis_title() const;
  void _internal_set_y_axis_title(const std::string& value);
  std::string* _internal_mutable_y_axis_title();
  public:

  // string z_axis_title = 10;
  void clear_z_axis_title();
  const std::string& z_axis_title() const;
  void set_z_axis_title(const std::string& value);
  void set_z_axis_title(std::string&& value);
  void set_z_axis_title(const char* value);
  void set_z_axis_title(const char* value, size_t size);
  std::string* mutable_z_axis_title();
  std::string* release_z_axis_title();
  void set_allocated_z_axis_title(std::string* z_axis_title);
  private:
  const std::string& _internal_z_axis_title() const;
  void _internal_set_z_axis_title(const std::string& value);
  std::string* _internal_mutable_z_axis_title();
  public:

  // float x_min = 11;
  void clear_x_min();
  float x_min() const;
  void set_x_min(float value);
  private:
  float _internal_x_min() const;
  void _internal_set_x_min(float value);
  public:

  // float x_max = 12;
  void clear_x_max();
  float x_max() const;
  void set_x_max(float value);
  private:
  float _internal_x_max() const;
  void _internal_set_x_max(float value);
  public:

  // float y_min = 13;
  void clear_y_min();
  float y_min() const;
  void set_y_min(float value);
  private:
  float _internal_y_min() const;
  void _internal_set_y_min(float value);
  public:

  // float y_max = 14;
  void clear_y_max();
  float y_max() const;
  void set_y_max(float value);
  private:
  float _internal_y_max() const;
  void _internal_set_y_max(float value);
  public:

  // int32 nb_points = 15;
  void clear_nb_points();
  ::PROTOBUF_NAMESPACE_ID::int32 nb_points() const;
  void set_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nb_points() const;
  void _internal_set_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_nb_points = 16;
  void clear_max_nb_points();
  ::PROTOBUF_NAMESPACE_ID::int32 max_nb_points() const;
  void set_max_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_nb_points() const;
  void _internal_set_max_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.GraphData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> series_names_area_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData > x_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData > y_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData > z_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> series_names_scatter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData > x_data_scatter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData > y_data_scatter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_axis_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_axis_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr z_axis_title_;
  float x_min_;
  float x_max_;
  float y_min_;
  float y_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 nb_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_nb_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class WorkflowResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.WorkflowResult) */ {
 public:
  inline WorkflowResult() : WorkflowResult(nullptr) {}
  virtual ~WorkflowResult();
  explicit constexpr WorkflowResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowResult(const WorkflowResult& from);
  WorkflowResult(WorkflowResult&& from) noexcept
    : WorkflowResult() {
    *this = ::std::move(from);
  }

  inline WorkflowResult& operator=(const WorkflowResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowResult& operator=(WorkflowResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkflowResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowResult* internal_default_instance() {
    return reinterpret_cast<const WorkflowResult*>(
               &_WorkflowResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkflowResult& a, WorkflowResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkflowResult* New() const final {
    return CreateMaybeMessage<WorkflowResult>(nullptr);
  }

  WorkflowResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkflowResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkflowResult& from);
  void MergeFrom(const WorkflowResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.WorkflowResult";
  }
  protected:
  explicit WorkflowResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kPathToResultsFieldNumber = 4,
    kGraphDataFieldNumber = 5,
    kProgressInPercentFieldNumber = 1,
  };
  // string status_code = 2;
  void clear_status_code();
  const std::string& status_code() const;
  void set_status_code(const std::string& value);
  void set_status_code(std::string&& value);
  void set_status_code(const char* value);
  void set_status_code(const char* value, size_t size);
  std::string* mutable_status_code();
  std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string path_to_results = 4;
  void clear_path_to_results();
  const std::string& path_to_results() const;
  void set_path_to_results(const std::string& value);
  void set_path_to_results(std::string&& value);
  void set_path_to_results(const char* value);
  void set_path_to_results(const char* value, size_t size);
  std::string* mutable_path_to_results();
  std::string* release_path_to_results();
  void set_allocated_path_to_results(std::string* path_to_results);
  private:
  const std::string& _internal_path_to_results() const;
  void _internal_set_path_to_results(const std::string& value);
  std::string* _internal_mutable_path_to_results();
  public:

  // .SmartPeakServer.GraphData graph_data = 5;
  bool has_graph_data() const;
  private:
  bool _internal_has_graph_data() const;
  public:
  void clear_graph_data();
  const ::SmartPeakServer::GraphData& graph_data() const;
  ::SmartPeakServer::GraphData* release_graph_data();
  ::SmartPeakServer::GraphData* mutable_graph_data();
  void set_allocated_graph_data(::SmartPeakServer::GraphData* graph_data);
  private:
  const ::SmartPeakServer::GraphData& _internal_graph_data() const;
  ::SmartPeakServer::GraphData* _internal_mutable_graph_data();
  public:
  void unsafe_arena_set_allocated_graph_data(
      ::SmartPeakServer::GraphData* graph_data);
  ::SmartPeakServer::GraphData* unsafe_arena_release_graph_data();

  // int32 progress_in_percent = 1;
  void clear_progress_in_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 progress_in_percent() const;
  void set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress_in_percent() const;
  void _internal_set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.WorkflowResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_to_results_;
  ::SmartPeakServer::GraphData* graph_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_in_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class InquireLogs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.InquireLogs) */ {
 public:
  inline InquireLogs() : InquireLogs(nullptr) {}
  virtual ~InquireLogs();
  explicit constexpr InquireLogs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InquireLogs(const InquireLogs& from);
  InquireLogs(InquireLogs&& from) noexcept
    : InquireLogs() {
    *this = ::std::move(from);
  }

  inline InquireLogs& operator=(const InquireLogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline InquireLogs& operator=(InquireLogs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InquireLogs& default_instance() {
    return *internal_default_instance();
  }
  static inline const InquireLogs* internal_default_instance() {
    return reinterpret_cast<const InquireLogs*>(
               &_InquireLogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InquireLogs& a, InquireLogs& b) {
    a.Swap(&b);
  }
  inline void Swap(InquireLogs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InquireLogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InquireLogs* New() const final {
    return CreateMaybeMessage<InquireLogs>(nullptr);
  }

  InquireLogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InquireLogs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InquireLogs& from);
  void MergeFrom(const InquireLogs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InquireLogs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.InquireLogs";
  }
  protected:
  explicit InquireLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNrLinesFieldNumber = 1,
  };
  // int32 nr_lines = 1;
  void clear_nr_lines();
  ::PROTOBUF_NAMESPACE_ID::int32 nr_lines() const;
  void set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nr_lines() const;
  void _internal_set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.InquireLogs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 nr_lines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// -------------------------------------------------------------------

class LogStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmartPeakServer.LogStream) */ {
 public:
  inline LogStream() : LogStream(nullptr) {}
  virtual ~LogStream();
  explicit constexpr LogStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogStream(const LogStream& from);
  LogStream(LogStream&& from) noexcept
    : LogStream() {
    *this = ::std::move(from);
  }

  inline LogStream& operator=(const LogStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogStream& operator=(LogStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogStream* internal_default_instance() {
    return reinterpret_cast<const LogStream*>(
               &_LogStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogStream& a, LogStream& b) {
    a.Swap(&b);
  }
  inline void Swap(LogStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogStream* New() const final {
    return CreateMaybeMessage<LogStream>(nullptr);
  }

  LogStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogStream& from);
  void MergeFrom(const LogStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmartPeakServer.LogStream";
  }
  protected:
  explicit LogStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_workflow_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogLineFieldNumber = 1,
  };
  // string log_line = 1;
  void clear_log_line();
  const std::string& log_line() const;
  void set_log_line(const std::string& value);
  void set_log_line(std::string&& value);
  void set_log_line(const char* value);
  void set_log_line(const char* value, size_t size);
  std::string* mutable_log_line();
  std::string* release_log_line();
  void set_allocated_log_line(std::string* log_line);
  private:
  const std::string& _internal_log_line() const;
  void _internal_set_log_line(const std::string& value);
  std::string* _internal_mutable_log_line();
  public:

  // @@protoc_insertion_point(class_scope:SmartPeakServer.LogStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_workflow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowParameters

// string sequence_file = 1;
inline void WorkflowParameters::clear_sequence_file() {
  sequence_file_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::sequence_file() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.sequence_file)
  return _internal_sequence_file();
}
inline void WorkflowParameters::set_sequence_file(const std::string& value) {
  _internal_set_sequence_file(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline std::string* WorkflowParameters::mutable_sequence_file() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.sequence_file)
  return _internal_mutable_sequence_file();
}
inline const std::string& WorkflowParameters::_internal_sequence_file() const {
  return sequence_file_.Get();
}
inline void WorkflowParameters::_internal_set_sequence_file(const std::string& value) {
  
  sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowParameters::set_sequence_file(std::string&& value) {
  
  sequence_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline void WorkflowParameters::set_sequence_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline void WorkflowParameters::set_sequence_file(const char* value,
    size_t size) {
  
  sequence_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowParameters.sequence_file)
}
inline std::string* WorkflowParameters::_internal_mutable_sequence_file() {
  
  return sequence_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowParameters::release_sequence_file() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.sequence_file)
  return sequence_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowParameters::set_allocated_sequence_file(std::string* sequence_file) {
  if (sequence_file != nullptr) {
    
  } else {
    
  }
  sequence_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.sequence_file)
}

// .SmartPeakServer.WorkflowParameters.ExportReport export = 2;
inline void WorkflowParameters::clear_export_() {
  export__ = 0;
}
inline ::SmartPeakServer::WorkflowParameters_ExportReport WorkflowParameters::_internal_export_() const {
  return static_cast< ::SmartPeakServer::WorkflowParameters_ExportReport >(export__);
}
inline ::SmartPeakServer::WorkflowParameters_ExportReport WorkflowParameters::export_() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.export)
  return _internal_export_();
}
inline void WorkflowParameters::_internal_set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value) {
  
  export__ = value;
}
inline void WorkflowParameters::set_export_(::SmartPeakServer::WorkflowParameters_ExportReport value) {
  _internal_set_export_(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.export)
}

// string report_metadata = 3;
inline void WorkflowParameters::clear_report_metadata() {
  report_metadata_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::report_metadata() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.report_metadata)
  return _internal_report_metadata();
}
inline void WorkflowParameters::set_report_metadata(const std::string& value) {
  _internal_set_report_metadata(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.report_metadata)
}
inline std::string* WorkflowParameters::mutable_report_metadata() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.report_metadata)
  return _internal_mutable_report_metadata();
}
inline const std::string& WorkflowParameters::_internal_report_metadata() const {
  return report_metadata_.Get();
}
inline void WorkflowParameters::_internal_set_report_metadata(const std::string& value) {
  
  report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowParameters::set_report_metadata(std::string&& value) {
  
  report_metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowParameters.report_metadata)
}
inline void WorkflowParameters::set_report_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowParameters.report_metadata)
}
inline void WorkflowParameters::set_report_metadata(const char* value,
    size_t size) {
  
  report_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowParameters.report_metadata)
}
inline std::string* WorkflowParameters::_internal_mutable_report_metadata() {
  
  return report_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowParameters::release_report_metadata() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.report_metadata)
  return report_metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowParameters::set_allocated_report_metadata(std::string* report_metadata) {
  if (report_metadata != nullptr) {
    
  } else {
    
  }
  report_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.report_metadata)
}

// string report_sample_types = 4;
inline void WorkflowParameters::clear_report_sample_types() {
  report_sample_types_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::report_sample_types() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.report_sample_types)
  return _internal_report_sample_types();
}
inline void WorkflowParameters::set_report_sample_types(const std::string& value) {
  _internal_set_report_sample_types(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.report_sample_types)
}
inline std::string* WorkflowParameters::mutable_report_sample_types() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.report_sample_types)
  return _internal_mutable_report_sample_types();
}
inline const std::string& WorkflowParameters::_internal_report_sample_types() const {
  return report_sample_types_.Get();
}
inline void WorkflowParameters::_internal_set_report_sample_types(const std::string& value) {
  
  report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowParameters::set_report_sample_types(std::string&& value) {
  
  report_sample_types_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowParameters.report_sample_types)
}
inline void WorkflowParameters::set_report_sample_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowParameters.report_sample_types)
}
inline void WorkflowParameters::set_report_sample_types(const char* value,
    size_t size) {
  
  report_sample_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowParameters.report_sample_types)
}
inline std::string* WorkflowParameters::_internal_mutable_report_sample_types() {
  
  return report_sample_types_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowParameters::release_report_sample_types() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.report_sample_types)
  return report_sample_types_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowParameters::set_allocated_report_sample_types(std::string* report_sample_types) {
  if (report_sample_types != nullptr) {
    
  } else {
    
  }
  report_sample_types_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_sample_types,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.report_sample_types)
}

// string integrity = 5;
inline void WorkflowParameters::clear_integrity() {
  integrity_.ClearToEmpty();
}
inline const std::string& WorkflowParameters::integrity() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowParameters.integrity)
  return _internal_integrity();
}
inline void WorkflowParameters::set_integrity(const std::string& value) {
  _internal_set_integrity(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowParameters.integrity)
}
inline std::string* WorkflowParameters::mutable_integrity() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowParameters.integrity)
  return _internal_mutable_integrity();
}
inline const std::string& WorkflowParameters::_internal_integrity() const {
  return integrity_.Get();
}
inline void WorkflowParameters::_internal_set_integrity(const std::string& value) {
  
  integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowParameters::set_integrity(std::string&& value) {
  
  integrity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowParameters.integrity)
}
inline void WorkflowParameters::set_integrity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowParameters.integrity)
}
inline void WorkflowParameters::set_integrity(const char* value,
    size_t size) {
  
  integrity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowParameters.integrity)
}
inline std::string* WorkflowParameters::_internal_mutable_integrity() {
  
  return integrity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowParameters::release_integrity() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowParameters.integrity)
  return integrity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowParameters::set_allocated_integrity(std::string* integrity) {
  if (integrity != nullptr) {
    
  } else {
    
  }
  integrity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integrity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowParameters.integrity)
}

// -------------------------------------------------------------------

// SingleAxisData

// repeated float axis_data = 1;
inline int SingleAxisData::_internal_axis_data_size() const {
  return axis_data_.size();
}
inline int SingleAxisData::axis_data_size() const {
  return _internal_axis_data_size();
}
inline void SingleAxisData::clear_axis_data() {
  axis_data_.Clear();
}
inline float SingleAxisData::_internal_axis_data(int index) const {
  return axis_data_.Get(index);
}
inline float SingleAxisData::axis_data(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.SingleAxisData.axis_data)
  return _internal_axis_data(index);
}
inline void SingleAxisData::set_axis_data(int index, float value) {
  axis_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.SingleAxisData.axis_data)
}
inline void SingleAxisData::_internal_add_axis_data(float value) {
  axis_data_.Add(value);
}
inline void SingleAxisData::add_axis_data(float value) {
  _internal_add_axis_data(value);
  // @@protoc_insertion_point(field_add:SmartPeakServer.SingleAxisData.axis_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SingleAxisData::_internal_axis_data() const {
  return axis_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SingleAxisData::axis_data() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.SingleAxisData.axis_data)
  return _internal_axis_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SingleAxisData::_internal_mutable_axis_data() {
  return &axis_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SingleAxisData::mutable_axis_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.SingleAxisData.axis_data)
  return _internal_mutable_axis_data();
}

// -------------------------------------------------------------------

// GraphData

// repeated string series_names_area = 1;
inline int GraphData::_internal_series_names_area_size() const {
  return series_names_area_.size();
}
inline int GraphData::series_names_area_size() const {
  return _internal_series_names_area_size();
}
inline void GraphData::clear_series_names_area() {
  series_names_area_.Clear();
}
inline std::string* GraphData::add_series_names_area() {
  // @@protoc_insertion_point(field_add_mutable:SmartPeakServer.GraphData.series_names_area)
  return _internal_add_series_names_area();
}
inline const std::string& GraphData::_internal_series_names_area(int index) const {
  return series_names_area_.Get(index);
}
inline const std::string& GraphData::series_names_area(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.series_names_area)
  return _internal_series_names_area(index);
}
inline std::string* GraphData::mutable_series_names_area(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.series_names_area)
  return series_names_area_.Mutable(index);
}
inline void GraphData::set_series_names_area(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.series_names_area)
  series_names_area_.Mutable(index)->assign(value);
}
inline void GraphData::set_series_names_area(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.series_names_area)
  series_names_area_.Mutable(index)->assign(std::move(value));
}
inline void GraphData::set_series_names_area(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  series_names_area_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.GraphData.series_names_area)
}
inline void GraphData::set_series_names_area(int index, const char* value, size_t size) {
  series_names_area_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.GraphData.series_names_area)
}
inline std::string* GraphData::_internal_add_series_names_area() {
  return series_names_area_.Add();
}
inline void GraphData::add_series_names_area(const std::string& value) {
  series_names_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.series_names_area)
}
inline void GraphData::add_series_names_area(std::string&& value) {
  series_names_area_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.series_names_area)
}
inline void GraphData::add_series_names_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  series_names_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartPeakServer.GraphData.series_names_area)
}
inline void GraphData::add_series_names_area(const char* value, size_t size) {
  series_names_area_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartPeakServer.GraphData.series_names_area)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphData::series_names_area() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.series_names_area)
  return series_names_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphData::mutable_series_names_area() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.series_names_area)
  return &series_names_area_;
}

// repeated .SmartPeakServer.SingleAxisData x_data = 2;
inline int GraphData::_internal_x_data_size() const {
  return x_data_.size();
}
inline int GraphData::x_data_size() const {
  return _internal_x_data_size();
}
inline void GraphData::clear_x_data() {
  x_data_.Clear();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::mutable_x_data(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.x_data)
  return x_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
GraphData::mutable_x_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.x_data)
  return &x_data_;
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::_internal_x_data(int index) const {
  return x_data_.Get(index);
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::x_data(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.x_data)
  return _internal_x_data(index);
}
inline ::SmartPeakServer::SingleAxisData* GraphData::_internal_add_x_data() {
  return x_data_.Add();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::add_x_data() {
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.x_data)
  return _internal_add_x_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
GraphData::x_data() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.x_data)
  return x_data_;
}

// repeated .SmartPeakServer.SingleAxisData y_data = 3;
inline int GraphData::_internal_y_data_size() const {
  return y_data_.size();
}
inline int GraphData::y_data_size() const {
  return _internal_y_data_size();
}
inline void GraphData::clear_y_data() {
  y_data_.Clear();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::mutable_y_data(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.y_data)
  return y_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
GraphData::mutable_y_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.y_data)
  return &y_data_;
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::_internal_y_data(int index) const {
  return y_data_.Get(index);
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::y_data(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.y_data)
  return _internal_y_data(index);
}
inline ::SmartPeakServer::SingleAxisData* GraphData::_internal_add_y_data() {
  return y_data_.Add();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::add_y_data() {
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.y_data)
  return _internal_add_y_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
GraphData::y_data() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.y_data)
  return y_data_;
}

// repeated .SmartPeakServer.SingleAxisData z_data = 4;
inline int GraphData::_internal_z_data_size() const {
  return z_data_.size();
}
inline int GraphData::z_data_size() const {
  return _internal_z_data_size();
}
inline void GraphData::clear_z_data() {
  z_data_.Clear();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::mutable_z_data(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.z_data)
  return z_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
GraphData::mutable_z_data() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.z_data)
  return &z_data_;
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::_internal_z_data(int index) const {
  return z_data_.Get(index);
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::z_data(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.z_data)
  return _internal_z_data(index);
}
inline ::SmartPeakServer::SingleAxisData* GraphData::_internal_add_z_data() {
  return z_data_.Add();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::add_z_data() {
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.z_data)
  return _internal_add_z_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
GraphData::z_data() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.z_data)
  return z_data_;
}

// repeated string series_names_scatter = 5;
inline int GraphData::_internal_series_names_scatter_size() const {
  return series_names_scatter_.size();
}
inline int GraphData::series_names_scatter_size() const {
  return _internal_series_names_scatter_size();
}
inline void GraphData::clear_series_names_scatter() {
  series_names_scatter_.Clear();
}
inline std::string* GraphData::add_series_names_scatter() {
  // @@protoc_insertion_point(field_add_mutable:SmartPeakServer.GraphData.series_names_scatter)
  return _internal_add_series_names_scatter();
}
inline const std::string& GraphData::_internal_series_names_scatter(int index) const {
  return series_names_scatter_.Get(index);
}
inline const std::string& GraphData::series_names_scatter(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.series_names_scatter)
  return _internal_series_names_scatter(index);
}
inline std::string* GraphData::mutable_series_names_scatter(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.series_names_scatter)
  return series_names_scatter_.Mutable(index);
}
inline void GraphData::set_series_names_scatter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.series_names_scatter)
  series_names_scatter_.Mutable(index)->assign(value);
}
inline void GraphData::set_series_names_scatter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.series_names_scatter)
  series_names_scatter_.Mutable(index)->assign(std::move(value));
}
inline void GraphData::set_series_names_scatter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  series_names_scatter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.GraphData.series_names_scatter)
}
inline void GraphData::set_series_names_scatter(int index, const char* value, size_t size) {
  series_names_scatter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.GraphData.series_names_scatter)
}
inline std::string* GraphData::_internal_add_series_names_scatter() {
  return series_names_scatter_.Add();
}
inline void GraphData::add_series_names_scatter(const std::string& value) {
  series_names_scatter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.series_names_scatter)
}
inline void GraphData::add_series_names_scatter(std::string&& value) {
  series_names_scatter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.series_names_scatter)
}
inline void GraphData::add_series_names_scatter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  series_names_scatter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SmartPeakServer.GraphData.series_names_scatter)
}
inline void GraphData::add_series_names_scatter(const char* value, size_t size) {
  series_names_scatter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SmartPeakServer.GraphData.series_names_scatter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphData::series_names_scatter() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.series_names_scatter)
  return series_names_scatter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphData::mutable_series_names_scatter() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.series_names_scatter)
  return &series_names_scatter_;
}

// repeated .SmartPeakServer.SingleAxisData x_data_scatter = 6;
inline int GraphData::_internal_x_data_scatter_size() const {
  return x_data_scatter_.size();
}
inline int GraphData::x_data_scatter_size() const {
  return _internal_x_data_scatter_size();
}
inline void GraphData::clear_x_data_scatter() {
  x_data_scatter_.Clear();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::mutable_x_data_scatter(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.x_data_scatter)
  return x_data_scatter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
GraphData::mutable_x_data_scatter() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.x_data_scatter)
  return &x_data_scatter_;
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::_internal_x_data_scatter(int index) const {
  return x_data_scatter_.Get(index);
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::x_data_scatter(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.x_data_scatter)
  return _internal_x_data_scatter(index);
}
inline ::SmartPeakServer::SingleAxisData* GraphData::_internal_add_x_data_scatter() {
  return x_data_scatter_.Add();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::add_x_data_scatter() {
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.x_data_scatter)
  return _internal_add_x_data_scatter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
GraphData::x_data_scatter() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.x_data_scatter)
  return x_data_scatter_;
}

// repeated .SmartPeakServer.SingleAxisData y_data_scatter = 7;
inline int GraphData::_internal_y_data_scatter_size() const {
  return y_data_scatter_.size();
}
inline int GraphData::y_data_scatter_size() const {
  return _internal_y_data_scatter_size();
}
inline void GraphData::clear_y_data_scatter() {
  y_data_scatter_.Clear();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::mutable_y_data_scatter(int index) {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.y_data_scatter)
  return y_data_scatter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >*
GraphData::mutable_y_data_scatter() {
  // @@protoc_insertion_point(field_mutable_list:SmartPeakServer.GraphData.y_data_scatter)
  return &y_data_scatter_;
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::_internal_y_data_scatter(int index) const {
  return y_data_scatter_.Get(index);
}
inline const ::SmartPeakServer::SingleAxisData& GraphData::y_data_scatter(int index) const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.y_data_scatter)
  return _internal_y_data_scatter(index);
}
inline ::SmartPeakServer::SingleAxisData* GraphData::_internal_add_y_data_scatter() {
  return y_data_scatter_.Add();
}
inline ::SmartPeakServer::SingleAxisData* GraphData::add_y_data_scatter() {
  // @@protoc_insertion_point(field_add:SmartPeakServer.GraphData.y_data_scatter)
  return _internal_add_y_data_scatter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SmartPeakServer::SingleAxisData >&
GraphData::y_data_scatter() const {
  // @@protoc_insertion_point(field_list:SmartPeakServer.GraphData.y_data_scatter)
  return y_data_scatter_;
}

// string x_axis_title = 8;
inline void GraphData::clear_x_axis_title() {
  x_axis_title_.ClearToEmpty();
}
inline const std::string& GraphData::x_axis_title() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.x_axis_title)
  return _internal_x_axis_title();
}
inline void GraphData::set_x_axis_title(const std::string& value) {
  _internal_set_x_axis_title(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.x_axis_title)
}
inline std::string* GraphData::mutable_x_axis_title() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.x_axis_title)
  return _internal_mutable_x_axis_title();
}
inline const std::string& GraphData::_internal_x_axis_title() const {
  return x_axis_title_.Get();
}
inline void GraphData::_internal_set_x_axis_title(const std::string& value) {
  
  x_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphData::set_x_axis_title(std::string&& value) {
  
  x_axis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.GraphData.x_axis_title)
}
inline void GraphData::set_x_axis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.GraphData.x_axis_title)
}
inline void GraphData::set_x_axis_title(const char* value,
    size_t size) {
  
  x_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.GraphData.x_axis_title)
}
inline std::string* GraphData::_internal_mutable_x_axis_title() {
  
  return x_axis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphData::release_x_axis_title() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.GraphData.x_axis_title)
  return x_axis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphData::set_allocated_x_axis_title(std::string* x_axis_title) {
  if (x_axis_title != nullptr) {
    
  } else {
    
  }
  x_axis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x_axis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.GraphData.x_axis_title)
}

// string y_axis_title = 9;
inline void GraphData::clear_y_axis_title() {
  y_axis_title_.ClearToEmpty();
}
inline const std::string& GraphData::y_axis_title() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.y_axis_title)
  return _internal_y_axis_title();
}
inline void GraphData::set_y_axis_title(const std::string& value) {
  _internal_set_y_axis_title(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.y_axis_title)
}
inline std::string* GraphData::mutable_y_axis_title() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.y_axis_title)
  return _internal_mutable_y_axis_title();
}
inline const std::string& GraphData::_internal_y_axis_title() const {
  return y_axis_title_.Get();
}
inline void GraphData::_internal_set_y_axis_title(const std::string& value) {
  
  y_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphData::set_y_axis_title(std::string&& value) {
  
  y_axis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.GraphData.y_axis_title)
}
inline void GraphData::set_y_axis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  y_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.GraphData.y_axis_title)
}
inline void GraphData::set_y_axis_title(const char* value,
    size_t size) {
  
  y_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.GraphData.y_axis_title)
}
inline std::string* GraphData::_internal_mutable_y_axis_title() {
  
  return y_axis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphData::release_y_axis_title() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.GraphData.y_axis_title)
  return y_axis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphData::set_allocated_y_axis_title(std::string* y_axis_title) {
  if (y_axis_title != nullptr) {
    
  } else {
    
  }
  y_axis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), y_axis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.GraphData.y_axis_title)
}

// string z_axis_title = 10;
inline void GraphData::clear_z_axis_title() {
  z_axis_title_.ClearToEmpty();
}
inline const std::string& GraphData::z_axis_title() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.z_axis_title)
  return _internal_z_axis_title();
}
inline void GraphData::set_z_axis_title(const std::string& value) {
  _internal_set_z_axis_title(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.z_axis_title)
}
inline std::string* GraphData::mutable_z_axis_title() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.GraphData.z_axis_title)
  return _internal_mutable_z_axis_title();
}
inline const std::string& GraphData::_internal_z_axis_title() const {
  return z_axis_title_.Get();
}
inline void GraphData::_internal_set_z_axis_title(const std::string& value) {
  
  z_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GraphData::set_z_axis_title(std::string&& value) {
  
  z_axis_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.GraphData.z_axis_title)
}
inline void GraphData::set_z_axis_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  z_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.GraphData.z_axis_title)
}
inline void GraphData::set_z_axis_title(const char* value,
    size_t size) {
  
  z_axis_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.GraphData.z_axis_title)
}
inline std::string* GraphData::_internal_mutable_z_axis_title() {
  
  return z_axis_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GraphData::release_z_axis_title() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.GraphData.z_axis_title)
  return z_axis_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphData::set_allocated_z_axis_title(std::string* z_axis_title) {
  if (z_axis_title != nullptr) {
    
  } else {
    
  }
  z_axis_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), z_axis_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.GraphData.z_axis_title)
}

// float x_min = 11;
inline void GraphData::clear_x_min() {
  x_min_ = 0;
}
inline float GraphData::_internal_x_min() const {
  return x_min_;
}
inline float GraphData::x_min() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.x_min)
  return _internal_x_min();
}
inline void GraphData::_internal_set_x_min(float value) {
  
  x_min_ = value;
}
inline void GraphData::set_x_min(float value) {
  _internal_set_x_min(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.x_min)
}

// float x_max = 12;
inline void GraphData::clear_x_max() {
  x_max_ = 0;
}
inline float GraphData::_internal_x_max() const {
  return x_max_;
}
inline float GraphData::x_max() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.x_max)
  return _internal_x_max();
}
inline void GraphData::_internal_set_x_max(float value) {
  
  x_max_ = value;
}
inline void GraphData::set_x_max(float value) {
  _internal_set_x_max(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.x_max)
}

// float y_min = 13;
inline void GraphData::clear_y_min() {
  y_min_ = 0;
}
inline float GraphData::_internal_y_min() const {
  return y_min_;
}
inline float GraphData::y_min() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.y_min)
  return _internal_y_min();
}
inline void GraphData::_internal_set_y_min(float value) {
  
  y_min_ = value;
}
inline void GraphData::set_y_min(float value) {
  _internal_set_y_min(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.y_min)
}

// float y_max = 14;
inline void GraphData::clear_y_max() {
  y_max_ = 0;
}
inline float GraphData::_internal_y_max() const {
  return y_max_;
}
inline float GraphData::y_max() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.y_max)
  return _internal_y_max();
}
inline void GraphData::_internal_set_y_max(float value) {
  
  y_max_ = value;
}
inline void GraphData::set_y_max(float value) {
  _internal_set_y_max(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.y_max)
}

// int32 nb_points = 15;
inline void GraphData::clear_nb_points() {
  nb_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphData::_internal_nb_points() const {
  return nb_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphData::nb_points() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.nb_points)
  return _internal_nb_points();
}
inline void GraphData::_internal_set_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nb_points_ = value;
}
inline void GraphData::set_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nb_points(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.nb_points)
}

// int32 max_nb_points = 16;
inline void GraphData::clear_max_nb_points() {
  max_nb_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphData::_internal_max_nb_points() const {
  return max_nb_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphData::max_nb_points() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.GraphData.max_nb_points)
  return _internal_max_nb_points();
}
inline void GraphData::_internal_set_max_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_nb_points_ = value;
}
inline void GraphData::set_max_nb_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_nb_points(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.GraphData.max_nb_points)
}

// -------------------------------------------------------------------

// WorkflowResult

// int32 progress_in_percent = 1;
inline void WorkflowResult::clear_progress_in_percent() {
  progress_in_percent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkflowResult::_internal_progress_in_percent() const {
  return progress_in_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkflowResult::progress_in_percent() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.progress_in_percent)
  return _internal_progress_in_percent();
}
inline void WorkflowResult::_internal_set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_in_percent_ = value;
}
inline void WorkflowResult::set_progress_in_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress_in_percent(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.progress_in_percent)
}

// string status_code = 2;
inline void WorkflowResult::clear_status_code() {
  status_code_.ClearToEmpty();
}
inline const std::string& WorkflowResult::status_code() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.status_code)
  return _internal_status_code();
}
inline void WorkflowResult::set_status_code(const std::string& value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.status_code)
}
inline std::string* WorkflowResult::mutable_status_code() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.status_code)
  return _internal_mutable_status_code();
}
inline const std::string& WorkflowResult::_internal_status_code() const {
  return status_code_.Get();
}
inline void WorkflowResult::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowResult::set_status_code(std::string&& value) {
  
  status_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowResult.status_code)
}
inline void WorkflowResult::set_status_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowResult.status_code)
}
inline void WorkflowResult::set_status_code(const char* value,
    size_t size) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowResult.status_code)
}
inline std::string* WorkflowResult::_internal_mutable_status_code() {
  
  return status_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowResult::release_status_code() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowResult::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.status_code)
}

// string session_id = 3;
inline void WorkflowResult::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& WorkflowResult::session_id() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.session_id)
  return _internal_session_id();
}
inline void WorkflowResult::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.session_id)
}
inline std::string* WorkflowResult::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& WorkflowResult::_internal_session_id() const {
  return session_id_.Get();
}
inline void WorkflowResult::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowResult::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowResult.session_id)
}
inline void WorkflowResult::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowResult.session_id)
}
inline void WorkflowResult::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowResult.session_id)
}
inline std::string* WorkflowResult::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowResult::release_session_id() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowResult::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.session_id)
}

// string path_to_results = 4;
inline void WorkflowResult::clear_path_to_results() {
  path_to_results_.ClearToEmpty();
}
inline const std::string& WorkflowResult::path_to_results() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.path_to_results)
  return _internal_path_to_results();
}
inline void WorkflowResult::set_path_to_results(const std::string& value) {
  _internal_set_path_to_results(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.WorkflowResult.path_to_results)
}
inline std::string* WorkflowResult::mutable_path_to_results() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.path_to_results)
  return _internal_mutable_path_to_results();
}
inline const std::string& WorkflowResult::_internal_path_to_results() const {
  return path_to_results_.Get();
}
inline void WorkflowResult::_internal_set_path_to_results(const std::string& value) {
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WorkflowResult::set_path_to_results(std::string&& value) {
  
  path_to_results_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.WorkflowResult.path_to_results)
}
inline void WorkflowResult::set_path_to_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.WorkflowResult.path_to_results)
}
inline void WorkflowResult::set_path_to_results(const char* value,
    size_t size) {
  
  path_to_results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.WorkflowResult.path_to_results)
}
inline std::string* WorkflowResult::_internal_mutable_path_to_results() {
  
  return path_to_results_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WorkflowResult::release_path_to_results() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.path_to_results)
  return path_to_results_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkflowResult::set_allocated_path_to_results(std::string* path_to_results) {
  if (path_to_results != nullptr) {
    
  } else {
    
  }
  path_to_results_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path_to_results,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.path_to_results)
}

// .SmartPeakServer.GraphData graph_data = 5;
inline bool WorkflowResult::_internal_has_graph_data() const {
  return this != internal_default_instance() && graph_data_ != nullptr;
}
inline bool WorkflowResult::has_graph_data() const {
  return _internal_has_graph_data();
}
inline void WorkflowResult::clear_graph_data() {
  if (GetArena() == nullptr && graph_data_ != nullptr) {
    delete graph_data_;
  }
  graph_data_ = nullptr;
}
inline const ::SmartPeakServer::GraphData& WorkflowResult::_internal_graph_data() const {
  const ::SmartPeakServer::GraphData* p = graph_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::SmartPeakServer::GraphData&>(
      ::SmartPeakServer::_GraphData_default_instance_);
}
inline const ::SmartPeakServer::GraphData& WorkflowResult::graph_data() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.WorkflowResult.graph_data)
  return _internal_graph_data();
}
inline void WorkflowResult::unsafe_arena_set_allocated_graph_data(
    ::SmartPeakServer::GraphData* graph_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_data_);
  }
  graph_data_ = graph_data;
  if (graph_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SmartPeakServer.WorkflowResult.graph_data)
}
inline ::SmartPeakServer::GraphData* WorkflowResult::release_graph_data() {
  
  ::SmartPeakServer::GraphData* temp = graph_data_;
  graph_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SmartPeakServer::GraphData* WorkflowResult::unsafe_arena_release_graph_data() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.WorkflowResult.graph_data)
  
  ::SmartPeakServer::GraphData* temp = graph_data_;
  graph_data_ = nullptr;
  return temp;
}
inline ::SmartPeakServer::GraphData* WorkflowResult::_internal_mutable_graph_data() {
  
  if (graph_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::SmartPeakServer::GraphData>(GetArena());
    graph_data_ = p;
  }
  return graph_data_;
}
inline ::SmartPeakServer::GraphData* WorkflowResult::mutable_graph_data() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.WorkflowResult.graph_data)
  return _internal_mutable_graph_data();
}
inline void WorkflowResult::set_allocated_graph_data(::SmartPeakServer::GraphData* graph_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_data_;
  }
  if (graph_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph_data);
    if (message_arena != submessage_arena) {
      graph_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_data, submessage_arena);
    }
    
  } else {
    
  }
  graph_data_ = graph_data;
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.WorkflowResult.graph_data)
}

// -------------------------------------------------------------------

// InquireLogs

// int32 nr_lines = 1;
inline void InquireLogs::clear_nr_lines() {
  nr_lines_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InquireLogs::_internal_nr_lines() const {
  return nr_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InquireLogs::nr_lines() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.InquireLogs.nr_lines)
  return _internal_nr_lines();
}
inline void InquireLogs::_internal_set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nr_lines_ = value;
}
inline void InquireLogs::set_nr_lines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nr_lines(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.InquireLogs.nr_lines)
}

// -------------------------------------------------------------------

// LogStream

// string log_line = 1;
inline void LogStream::clear_log_line() {
  log_line_.ClearToEmpty();
}
inline const std::string& LogStream::log_line() const {
  // @@protoc_insertion_point(field_get:SmartPeakServer.LogStream.log_line)
  return _internal_log_line();
}
inline void LogStream::set_log_line(const std::string& value) {
  _internal_set_log_line(value);
  // @@protoc_insertion_point(field_set:SmartPeakServer.LogStream.log_line)
}
inline std::string* LogStream::mutable_log_line() {
  // @@protoc_insertion_point(field_mutable:SmartPeakServer.LogStream.log_line)
  return _internal_mutable_log_line();
}
inline const std::string& LogStream::_internal_log_line() const {
  return log_line_.Get();
}
inline void LogStream::_internal_set_log_line(const std::string& value) {
  
  log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogStream::set_log_line(std::string&& value) {
  
  log_line_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SmartPeakServer.LogStream.log_line)
}
inline void LogStream::set_log_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SmartPeakServer.LogStream.log_line)
}
inline void LogStream::set_log_line(const char* value,
    size_t size) {
  
  log_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SmartPeakServer.LogStream.log_line)
}
inline std::string* LogStream::_internal_mutable_log_line() {
  
  return log_line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogStream::release_log_line() {
  // @@protoc_insertion_point(field_release:SmartPeakServer.LogStream.log_line)
  return log_line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogStream::set_allocated_log_line(std::string* log_line) {
  if (log_line != nullptr) {
    
  } else {
    
  }
  log_line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_line,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SmartPeakServer.LogStream.log_line)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SmartPeakServer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SmartPeakServer::WorkflowParameters_ExportReport> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SmartPeakServer::WorkflowParameters_ExportReport>() {
  return ::SmartPeakServer::WorkflowParameters_ExportReport_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_workflow_2eproto
