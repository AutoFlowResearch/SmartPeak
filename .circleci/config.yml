version: 2.1

orbs:
  win: circleci/windows@2.4.0

jobs:

  build_macos:
    macos:
      xcode: "12.5.1"
    resource_class: medium
    working_directory: ~/SmartPeak
    steps:
      - checkout
      - run:
          name: Installing required libraries
          command: |
            brew update
            brew remove yarn node
            brew install cmake qt5 sdl2 zlib
            brew install cppcheck gnuplot
            brew install libomp
            pip3 install -r tools/smartpeak/requirements.txt
      - run:
          name: "Pull latest (only release)"
          command: |
            if [[ << pipeline.git.branch >> =~ ^release\/.* ]]; then
                git checkout << pipeline.git.branch >>
                git pull origin << pipeline.git.branch >>
            else
              echo "Skip this run step"
            fi
      - run:
          name: Cloning and building OpenMS
          command: |
            cd ~ &&
            git clone --branch develop --depth 1 https://github.com/OpenMS/OpenMS.git &&
            cd OpenMS
            mkdir contrib_build && cd contrib_build
            curl -C - -O https://abibuilder.informatik.uni-tuebingen.de/archive/openms/contrib/macOS/10.15.4/x64/appleclang-11.0.0/contrib_build.tar.gz
            tar -xzf contrib_build.tar.gz
            sed -i '' 's/std::auto_ptr/std::unique_ptr/g' include/seqan/basic/test_system.h
            rm lib/libz.* && rm -rf lib/pkgconfig
            cd ~/OpenMS &&  mkdir openms_debug_build && cd openms_debug_build &&
            cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_STANDARD=14 -DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_PREFIX_PATH="$(brew --prefix qt5)" -DOPENMS_CONTRIB_LIBS=~/OpenMS/contrib_build/ -DHAS_XSERVER=OFF -DWITH_GUI=OFF -DENABLE_TUTORIALS=OFF -DENABLE_DOCS=OFF -DGIT_TRACKING=OFF -DENABLE_UPDATE_CHECK=OFF -DCMAKE_BUILD_TYPE=Debug -DPYOPENMS=OFF -DOPENMS_COVERAGE=OFF -DZLIB_ROOT=$(brew --prefix zlib) ..
            make -j4 OpenMS
      - run:
          name: Building SmartPeak (Including SuperBuild)
          command: |
            cd ~/SmartPeak
            mkdir superbuild
            mkdir smartpeak_release_build
            cd superbuild
            cmake -DUSE_SUPERBUILD=ON -DCMAKE_BUILD_TYPE=Debug .. && make -j4
            cd ../smartpeak_release_build
            cmake -DEIGEN_USE_GPU=OFF -DUSE_SUPERBUILD=OFF -DBOOST_USE_STATIC=OFF -DCMAKE_PREFIX_PATH="~/OpenMS/openms_debug_build/;~/OpenMS/contrib_build;$(brew --prefix qt5);(brew --prefix eigen);$(brew --prefix zlib);$(brew --prefix openssl)" -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DPLOG_INCLUDE_DIR=~/SmartPeak/superbuild/Dependencies/Source/plog/include   -DIMGUI_DIR=~/SmartPeak/superbuild/Dependencies/Source/imgui  -DIMPLOT_DIR=~/SmartPeak/superbuild/Dependencies/Source/implot -DPORTABLEFILEDIALOGS_DIR=$HOME/SmartPeak/superbuild/Dependencies/Source/portablefiledialogs -DSQLite3_INCLUDE_DIR=~/SmartPeak/superbuild/Dependencies/Source/sqlite -DSQLite3_LIBRARY=~/SmartPeak/superbuild/Dependencies/Source/sqlite -DCMAKE_BUILD_TYPE=Debug -DOpenMP_CXX_FLAGS="-Xpreprocessor -fopenmp -I/usr/local/opt/libomp/include" -DOpenMP_CXX_LIB_NAMES="omp" -DOpenMP_omp_LIBRARY=/usr/local/opt/libomp/lib/libomp.dylib -DgRPC_ZLIB_PROVIDER=package ~/SmartPeak
            make -j4
      - run:
          name: Running SmartPeak Examples
          command: |
            ~/SmartPeak/.circleci/run_examples.sh ~/SmartPeak/smartpeak_release_build/bin
      - run:
          name: Packing SmartPeak
          command: |
            set +e
            cd ~/SmartPeak/smartpeak_release_build
            ls -alt bin
            cpack -G DragNDrop && ls -alth
            yes | hdiutil attach -noautoopen -noverify SmartPeak-*.dmg > /dev/null
            otool -l /Volumes/SmartPeak-1.0.0-Darwin/SmartPeakGUI.app/Contents/MacOS/SmartPeakGUI | grep -a name
            cp -r /Volumes/SmartPeak-*-Darwin/SmartPeakGUI.app /Volumes/SmartPeak-*-Darwin/share .
            xattr -l SmartPeakGUI.app/*
            sudo xattr -dr com.apple.quarantine SmartPeakGUI.app
            # open SmartPeakGUI.app
      - run:
          name: Moving Package to artifacts folder
          command: |
            mkdir -p /tmp/artifacts
            cp ~/SmartPeak/smartpeak_release_build/*.dmg /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts

  prepare_release:
    # This job is responsible for updating a package version stored in a configuration.
    # The update is done automatically and changes are pushed back to release branch.
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.2
    steps:
      - checkout
      - run:
          name: "Check prerequisites"
          command: |
            pip install -r tools/smartpeak/requirements.txt
      - run:
          name: "Update SmartPeak version"
          command: |
            echo "Branch name: ${CIRCLE_BRANCH}"
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            echo "Release tag: ${VERSION}"
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            smartpeak_prepare_release --set-version=${VERSION}
      - add_ssh_keys:
          fingerprints:
            - "e8:9a:a0:0b:75:00:75:1c:04:71:9c:7d:07:af:a2:0d"
      - run:
          name: "Push release branch"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            git config --global user.email "smartpeak.ci@gmail.com"
            git config --global user.name "smartpeak-ci"
            git status
            git diff-index --quiet HEAD || git commit -am "Release update (${VERSION}) [skip ci]"
            git push origin ${CIRCLE_BRANCH}
            
  publish_release:
    # This job is responsible for publishing the release to the github repository.
    # The job first merges release branch to develop and directly pushes the changes (only one commit).
    # The release tag will be created (on develop) with a text body retrieved from 
    # the changelog description, corresponding to the version being released.
    # All artifacts in current workflow from other jobs will be fetched and 
    # used as artifacts visible in github releases.
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.2
    steps:
      - checkout
      - run:
          name: "Install prerequisites"
          command: |
            apt-get update
            apt-get install -y software-properties-common apt-transport-https
            apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
            apt-add-repository https://cli.github.com/packages
            apt-get update
            apt-get install -y gh curl wget jq
            pip install -r tools/smartpeak/requirements.txt
            GHR_VERSION=0.13.0
            GHR_URL=https://github.com/tcnksm/ghr/releases/download/v${GHR_VERSION}/ghr_v${GHR_VERSION}_linux_amd64.tar.gz
            wget "$GHR_URL" && \
              tar xzf ghr_v${GHR_VERSION}_linux_amd64.tar.gz && \
              mv ghr_v${GHR_VERSION}_linux_amd64/ghr /usr/bin/ghr && \
              rm -r ghr_v${GHR_VERSION}_linux_amd64.tar.gz ghr_v${GHR_VERSION}_linux_amd64/
      - run:
          name: "Retrieve artifacts"
          command: |
            mkdir arts

            # Get all job numbers for this workflow: 
            JOB_NUMBERS_CONTENT=$(curl --request GET \
              --url "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job" \
              --header "Circle-Token: ${CIRCLE_TOKEN}" \
              --header 'content-type: application/json')
            JOB_NUMBERS=$(echo $JOB_NUMBERS_CONTENT | jq -r '.items[] | select (.type? == "build") | .job_number')
            echo $JOB_NUMBERS | tr " " "\n" > job_num.txt
            echo "Found job IDs in current workflow"
            cat job_num.txt

            # Get artifacts per each job:
            echo "Current job: ${CIRCLE_BUILD_NUM}"
            echo "Searching for Artifacts .........."
            for x in $JOB_NUMBERS ; do 
              if [[ "$x" == "$CIRCLE_BUILD_NUM" ]]; then
                continue
              fi
              echo "Get artifacts for job ${x}"
              ART_CONTENT=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/$x/artifacts" \
                --header "Circle-Token: ${CIRCLE_TOKEN}" \
                --header 'content-type: application/json') 
              echo $ART_CONTENT
              echo 
              ARTS=$(echo $ART_CONTENT | jq -r '.items[] | .url')
              # echo "*** Artifacts For Job Number $x ***"
              echo "Detected following url: $ARTS"
              if [ ! -z "$ARTS" ]; then 
                echo "Download from url: ${ARTS}"
                wget -P arts --verbose --header "Circle-Token: ${CIRCLE_TOKEN}" $ARTS
              else
                echo "Skip download for #${x}"
              fi
              echo 
            done
      - run:
          name: "Auto PR"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            git checkout ${CIRCLE_BRANCH}
            git pull origin ${CIRCLE_BRANCH}
            echo ${SMARTPEAK_GITHUB_TOKEN} | gh auth login --with-token
            gh pr create --title "Release v${VERSION}" --body " " --base develop --head ${CIRCLE_BRANCH} --repo AutoFlowResearch/SmartPeak
      - run:
          name: "Publish release to github"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            echo "export SMARTPEAK_VERSION=$VERSION" >> $BASH_ENV
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            RELEASE_BODY=$(smartpeak_changes)
            ghr -t ${SMARTPEAK_GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_BRANCH} -b "${RELEASE_BODY}" -delete "v${VERSION}" arts
      - run:
          name: "Notify users"
          command: |
            BRANCH=(${CIRCLE_BRANCH//// })
            VERSION=${BRANCH[1]}
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"

            # Prepare authentication with Gmail API
            echo $GMAIL_TOKEN_PICKLE | base64 --decode > token.pickle

            # Send emails:
            smartpeak_send_emails --version=${VERSION}
            
  trigger_release:
    # The job is responsible for triggering a release from last commit message, if release string present.
    # Each commit on develop has to be verified, if there is release string included in the last commit message, 
    # the job will push release branch, otherwise nothing will happen.
    working_directory: ~/SmartPeak
    docker:
      - image: python:3.7.2
    steps:
      - checkout
      - run:
          name: "Install prerequisites"
          command: |
            apt-get update
            pip install -r tools/smartpeak/requirements.txt
      - add_ssh_keys:
          fingerprints:
            - "e8:9a:a0:0b:75:00:75:1c:04:71:9c:7d:07:af:a2:0d"
      - run:
          name: "Verify commit"
          command: |
            # Parse latest commit message:
            export PATH="$PATH:$PWD/tools/smartpeak"
            export PYTHONPATH="$PYTHONPATH:$PWD/tools"
            RELEASE_AVAILABLE=$(smartpeak_git_release_available)
            # If smartpeak_git_release_available outputs anything, then there is a valid release string included
            if [ ! -z "${RELEASE_AVAILABLE}" ]; then
              # Retrieve version:  
              split=(${RELEASE_AVAILABLE})
              VERSION=${split[2]}
              # Push release branch:
              git config --global user.email "smartpeak.ci@gmail.com"
              git config --global user.name "smartpeak-ci"
              git checkout -b release/${VERSION}
              git push origin release/${VERSION}
              echo "The new branch release/${VERSION} pushed!"
            else
              echo "No release command detected. Exit."
            fi

workflows:
  version: 2.1
  ci:
    jobs:
      - build_macos:
          filters:
            branches:
              ignore: /^release\/.*$/
  release_check:
    jobs:
      - trigger_release:
          filters:
            branches:
              only: develop
  release:
    jobs:
      - prepare_release:
          filters:
            branches:
              only: /^release\/.*$/
      - build_ubuntu:
          requires:
            - prepare_release
      - build_macos:
          requires:
            - prepare_release
      - build_windows:
          requires:
            - prepare_release
      - publish_release:
          requires:
            - build_ubuntu
            - build_macos
            - build_windows
